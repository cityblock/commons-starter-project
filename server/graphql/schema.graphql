enum UserRole {
  physician
  nurseCareManager
  healthCoach
  familyMember
  anonymousUser
  admin
}

enum AppointmentStatus {
  cancelled
  future
  open
  checkedIn
  checkedOut
  chargeEntered
}

enum TaskOrderOptions {
  createdAtDesc
  createdAtAsc
  dueAtDesc
  dueAtAsc
  updatedAtDesc
  updatedAtAsc
}

enum AnswerValueTypeOptions {
  string
  boolean
  number
}

enum RiskAdjustmentTypeOptions {
  increment
  forceHighRisk
}

enum AnswerTypeOptions {
  dropdown
  radio
  freetext
  multiselect
}

enum QuestionConditionTypeOptions {
  allTrue
  oneTrue
}

enum TaskEventTypes {
  create_task
  add_follower
  remove_follower
  complete_task
  uncomplete_task
  delete_task
  add_comment
  edit_comment
  delete_comment
  edit_priority
  edit_due_date
  edit_assignee
  edit_title
  edit_description
}

# User account model
type User implements uniqueId {
  id: ID!
  locale: String
  firstName: String
  lastName: String
  email: String
  userRole: UserRole!
  createdAt: String!
  homeClinicId: String!
  googleProfileImageUrl: String
}

# The user account with an optional auth token
type UserWithAuthToken {
  user: User!
  # The auth token to allow for quick login. JWT passed back in via headers for further requests
  authToken: String
}

# User node
type UserNode {
  node: User
  cursor: String!
}

# User edges
type UserEdges {
  edges: [UserNode]
  pageInfo: PageInfo!
}

# An object with a Globally Unique ID
interface uniqueId {
  # The ID of the object.
  id: ID!
}

# Page info for paginated responses
type PageInfo {
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
}

# Patient contact
type Contact {
  email: String
  lastEmail: String
  emailExists: Boolean
  homePhone: String
  mobilePhone: String
  hasMobile: Boolean
  consentToCall: Boolean
  consentToText: Boolean
}

# Patient address
type Address {
  city: String
  address1: String
  countryCode: String
  countryCode3166: String
  state: String
  zip: String
}

# Patient employer
type Employer {
  id: String
  phone: String
  city: String
  state: String
  name: String
  address: String
  zip: String
}

# Patient Garantor Address (for payment)
type GarantorAddress {
  addressSameAsPatient: Boolean
  address1: String
  city: String
  zip: String
  state: String
  countryCode: String
  countryCode3166: String
}

# Patient Garantor (for payment)
type Garantor {
  firstName: String
  lastName: String
  suffix: String
  SSN: String
  dateOfBirth: String
  phone: String
  email: String
  relationshipToPatient: String
  employerId: String
  address: GarantorAddress
}

# Patient combining data in athena and our database
type Patient implements uniqueId {
  id: ID!
  firstName: String
  middleName: String
  language: String
  lastName: String
  dateOfBirth: String
  gender: String
  zip: Int
  homeClinicId: String
  createdAt: String
  scratchPad: String
  consentToCall: Boolean
  consentToText: Boolean
}

# Patient Athena health record
type PatientHealthRecord {
  id: ID!
  firstName: String
  middleName: String
  lastName: String
  dateOfBirth: String
  gender: String
  suffix: String
  preferredName: String
  raceName: String
  race: String
  ethnicityCode: String
  status: String
  ssn: String
  homebound: Boolean
  language6392code: String
  maritalStatus: String
  maritalStatusName: String
  patientPhoto: Boolean
  patientPhotoUrl: String
  contact: Contact
  guarantor: Garantor
  employer: Employer
  address: Address
}

# Patient node
type PatientNode {
  node: Patient
  cursor: String!
}

# Patient edges
type PatientEdges {
  edges: [PatientNode]
  pageInfo: PageInfo!
}

# Clinic node
type ClinicNode {
  node: Clinic
  cursor: String!
}

# Clinic edges
type ClinicEdges {
  edges: [ClinicNode]
  pageInfo: PageInfo!
}

# Clinic
type Clinic implements uniqueId {
  id: ID!
  name: String!
  departmentId: Int!
  createdAt: String!
  updatedAt: String!
}

# PatientMedication
type PatientMedication {
  name: String!
  medicationId: String!
  quantity: String
  quantityUnit: String
  dosageInstructions: String
  startDate: String
}

# PatientMedicationsDetails
type PatientMedicationsDetails {
  active: [PatientMedication]!
  inactive: [PatientMedication]!
}

# PatientMedications
type PatientMedications {
  medications: PatientMedicationsDetails!
}

# PatientDiagnosis
type PatientDiagnosis {
  code: String!
  codeSystem: String!
  description: String!
}

# PatientEncounter
type PatientEncounter {
  encounterType: String!
  providerName: String!
  providerRole: String!
  location: String!
  diagnoses: [PatientDiagnosis]!
  reasons: [String]!
  dateTime: String!
}

# Appointment
type Appointment {
  athenaAppointmentId: String!
  dateTime: String!
  athenaDepartmentId: Int!
  status: AppointmentStatus!
  athenaPatientId: Int!
  duration: Int!
  appointmentTypeId: Int!
  appointmentType: String!
  athenaProviderId: Int!
  userId: String!
  patientId: String!
  clinicId: String!
}

# Appointment End Result
type AppointmentEndResult {
  success: Boolean!
}

# Appointment Add Note Result
type AppointmentAddNoteResult {
  success: Boolean!
  appointmentNote: String!
}

# Patient Scratch Pad
type PatientScratchPad {
  text: String
}

# Task
type Task implements uniqueId {
  id: ID!
  title: String!
  description: String
  patient: Patient
  patientId: String!
  dueAt: String
  priority: String
  createdBy: User
  createdAt: String
  updatedAt: String
  deletedAt: String
  completedBy: User
  completedAt: String
  assignedTo: User
  followers: [User!]
}

# Task node
type TaskNode {
  node: Task
  cursor: String!
}

# Task edges
type TaskEdges {
  edges: [TaskNode]
  pageInfo: PageInfo!
}

# Task comment
type TaskComment implements uniqueId {
  id: ID!
  body: String!
  user: User!
  taskId: String!
  createdAt: String
  updatedAt: String
}

# Task comment node
type TaskCommentNode {
  node: TaskComment
  cursor: String!
}

# Task comment edges
type TaskCommentEdges {
  edges: [TaskCommentNode]
  pageInfo: PageInfo!
}

# Answer
type Answer implements uniqueId {
  id: ID!
  createdAt: String!
  updatedAt: String!
  deletedAt: String
  displayValue: String!
  value: String!
  valueType: AnswerValueTypeOptions!
  riskAdjustmentType: RiskAdjustmentTypeOptions
  inSummary: Boolean
  summaryText: String
  questionId: String!
  order: Int!
}

# PatientAnswer
type PatientAnswer implements uniqueId {
  id: ID!
  createdAt: String!
  updatedAt: String!
  deletedAt: String
  answerId: String!
  answerValue: String!
  patientId: String!
  applicable: Boolean
}

# Question
type Question implements uniqueId {
  id: ID!
  createdAt: String!
  updatedAt: String!
  deletedAt: String
  title: String!
  validatedSource: String
  answers: [Answer!]
  answerType: AnswerTypeOptions!
  riskAreaId: String!
  applicableIfQuestionConditions: [QuestionCondition!]
  applicableIfType: QuestionConditionTypeOptions
  order: Int!
}

# QuestionCondition
type QuestionCondition implements uniqueId {
  id: ID!
  createdAt: String!
  updatedAt: String!
  deletedAt: String
  answerId: String!
  questionId: String!
}

# Risk Area
type RiskArea implements uniqueId {
  id: ID!
  createdAt: String!
  updatedAt: String!
  deletedAt: String
  title: String!
  order: Int!
}

# Task Event
type TaskEvent implements uniqueId {
  id: ID!
  taskId: String!
  task: Task!
  userId: String!
  user: User!
  eventType: TaskEventTypes
  eventCommentId: String
  eventComment: TaskComment
  eventUserId: String
  eventUser: User
  createdAt: String!
  updatedAt: String!
  deletedAt: String
}

# Event Notification
type EventNotification implements uniqueId {
  id: ID!
  title: String
  userId: String!
  user: User!
  taskEventId: String
  taskEvent: TaskEvent
  task: Task
  seenAt: String
  emailSentAt: String
  deliveredAt: String
  createdAt: String!
  updatedAt: String!
  deletedAt: String
}

# Event Notification node
type EventNotificationNode {
  node: EventNotification
  cursor: String!
}

# Event Notification edges
type EventNotificationEdges {
  edges: [EventNotificationNode]
  pageInfo: PageInfo!
}

#
# BEGIN INPUT FIELDS
#

# params for creating a user
input UserCreateInput {
  email: String!
  homeClinicId: String!
}

# params for logging in a user
input UserLoginInput {
  googleAuthCode: String!
}

# params for creating a clinic
input ClinicCreateInput {
  departmentId: Int!
  name: String!
}

# params for adding or removing patient from care team
input CareTeamInput {
  userId: String!
  patientId: String!
}

# params for starting an appointment
input AppointmentStartInput {
  patientId: String!
  appointmentTypeId: Int
}

# params for ending an appointment
input AppointmentEndInput {
  patientId: String!
  appointmentId: String!
  appointmentNote: String
}

# params for adding a note to an appointment
input AppointmentAddNoteInput {
  patientId: String!
  appointmentId: String!
  appointmentNote: String!
}

# params for editing a patient in the db
input PatientEditInput {
  patientId: String!
  firstName: String
  middleName: String
  lastName: String
  dateOfBirth: String
  gender: String
  zip: Int
  language: String
  consentToCall: Boolean
  consentToText: Boolean
}

# params for creating a patient in the db and in athena
input PatientSetupInput {
  firstName: String!
  middleName: String
  lastName: String!
  dateOfBirth: String!
  gender: String!
  zip: Int!
  homeClinicId: String!
  suffix: String
  preferredName: String
  race: String!
  ssn: String!
  language: String!
  maritalStatus: String!

  email: String
  homePhone: String
  mobilePhone: String
  consentToCall: Boolean!
  consentToText: Boolean!

  city: String
  address1: String
  county: String
  country: String
  state: String

  insuranceType: String
  patientRelationshipToPolicyHolder: String
  memberId: String
  policyGroupNumber: String
  issueDate: String
  expirationDate: String
}

# params for editing a patient scratch pad
input PatientScratchPadEditInput {
  patientId: String!
  text: String!
}

# params for editing a current user
input CurrentUserEditInput {
  locale: String
  firstName: String
  lastName: String
}

# params for creating a task
input TaskCreateInput {
  title: String!
  description: String
  dueAt: String
  patientId: String!
  assignedToId: String
}

# params for deleting a task
input TaskDeleteInput {
  taskId: String!
}

# params for creating a task
input TaskEditInput {
  taskId: String!
  title: String
  description: String
  dueAt: String
  assignedToId: String
  priority: String
}

# params for completing a task
input TaskCompleteInput {
  taskId: String!
}

# params for adding user to a task's followers
input TaskFollowInput {
  userId: String!
  taskId: String!
}

# params for creating a task comment
input TaskCommentCreateInput {
  taskId: String!
  body: String!
}

# params for editing a task comment
input TaskCommentEditInput {
  taskCommentId: String!
  body: String!
}

# params for deleting a task comment
input TaskCommentDeleteInput {
  taskCommentId: String!
}

input RiskAreaCreateInput {
  title: String!
  order: Int!
}

input RiskAreaEditInput {
  riskAreaId: String!
  title: String
  order: Int
}

input RiskAreaDeleteInput {
  riskAreaId: String!
}

input QuestionCreateInput {
  title: String!
  answerType: AnswerTypeOptions!
  validatedSource: String
  riskAreaId: String!
  order: Int!
  applicableIfType: QuestionConditionTypeOptions
}

input QuestionEditInput {
  questionId: String!
  title: String
  answerType: AnswerTypeOptions
  validatedSource: String
  riskAreaId: String
  order: Int
  applicableIfType: QuestionConditionTypeOptions
}

input QuestionDeleteInput {
  questionId: String!
}

input AnswerCreateInput {
  displayValue: String!
  value: String!
  valueType: AnswerValueTypeOptions!
  riskAdjustmentType: RiskAdjustmentTypeOptions
  inSummary: Boolean
  summaryText: String
  questionId: String!
  order: Int!
}

input AnswerEditInput {
  displayValue: String
  value: String
  valueType: AnswerValueTypeOptions
  riskAdjustmentType: RiskAdjustmentTypeOptions
  inSummary: Boolean
  summaryText: String
  order: Int
  answerId: String!
}

input AnswerDeleteInput {
  answerId: String!
}

input PatientAnswerCreateInput {
  answerId: String!
  answerValue: String!
  patientId: String!
  applicable: Boolean!
}

input PatientAnswerEditInput {
  applicable: Boolean!
  patientAnswerId: String!
}

input PatientAnswerDeleteInput {
  patientAnswerId: String!
}

input QuestionConditionCreateInput {
  questionId: String!
  answerId: String!
}

# QuestionCondition edit input - for validation, need to edit question and answer at the same time
input QuestionConditionEditInput {
  questionConditionId: String!
  questionId: String!
  answerId: String!
}

input QuestionConditionDeleteInput {
  questionConditionId: String!
}

# EventNotification edit input
input EventNotificationEditInput {
  eventNotificationId: String!
}

type RootMutationType {
  # Create a new user
  userCreate(input: UserCreateInput): UserWithAuthToken

  # Login user
  userLogin(input: UserLoginInput): UserWithAuthToken

  # Edit current user
  currentUserEdit(input: CurrentUserEditInput): User

  # Create a new clinic
  clinicCreate(input: ClinicCreateInput): Clinic

  # Add user to careTeam
  careTeamAddUser(input: CareTeamInput): [User]

  # Remove user from careTeam
  careTeamRemoveUser(input: CareTeamInput): [User]

  # Add a note to an appointment
  appointmentAddNote(input: AppointmentAddNoteInput): AppointmentAddNoteResult

  # Start an appointment
  appointmentStart(input: AppointmentStartInput): Appointment

  # End an appointment
  appointmentEnd(input: AppointmentEndInput): AppointmentEndResult

  # Edit fields on patient stored in the db
  patientEdit(input: PatientEditInput): Patient

  # Setup patient creates the patient in the db AND in athena
  patientSetup(input: PatientSetupInput): Patient

  # Edit a patient scratch pad
  patientScratchPadEdit(input: PatientScratchPadEditInput): PatientScratchPad

  # Create a task
  taskCreate(input: TaskCreateInput): Task

  # Delete a task
  taskDelete(input: TaskDeleteInput): Task

  # Edit a task
  taskEdit(input: TaskEditInput): Task

  # Complete a task
  taskComplete(input: TaskCompleteInput): Task

  # Uncomplete a task
  taskUncomplete(input: TaskCompleteInput): Task

  # Add user to task followers
  taskUserFollow(input: TaskFollowInput): Task

  # Remove user from task followers
  taskUserUnfollow(input: TaskFollowInput): Task

  # Create a task
  taskCommentCreate(input: TaskCommentCreateInput): TaskComment

  # Edit a task
  taskCommentEdit(input: TaskCommentEditInput): TaskComment

  # Delete a task
  taskCommentDelete(input: TaskCommentDeleteInput): TaskComment

  # Create a RiskArea
  riskAreaCreate(input: RiskAreaCreateInput): RiskArea

  # Edit a RiskArea
  riskAreaEdit(input: RiskAreaEditInput): RiskArea

  # Deletes a RiskArea
  riskAreaDelete(input: RiskAreaDeleteInput): RiskArea

  # Create a Question
  questionCreate(input: QuestionCreateInput): Question

  # Edit a Question
  questionEdit(input: QuestionEditInput): Question

  # Delete a question
  questionDelete(input: QuestionDeleteInput): Question

  # Create an Answer
  answerCreate(input: AnswerCreateInput): Answer

  # Edit an Answer
  answerEdit(input: AnswerEditInput): Answer

  # Deletes an Answer
  answerDelete(input: AnswerDeleteInput): Answer

  # Create an Answer
  patientAnswerCreate(input: PatientAnswerCreateInput): PatientAnswer

  # Edit an Answer
  patientAnswerEdit(input: PatientAnswerEditInput): PatientAnswer

  # Deletes an Answer
  patientAnswerDelete(input: PatientAnswerDeleteInput): PatientAnswer

  # Create a QuestionCondition
  questionConditionCreate(input: QuestionConditionCreateInput): QuestionCondition

  # Edit a QuestionCondition
  questionConditionEdit(input: QuestionConditionEditInput): QuestionCondition

  # Deletes a QuestionCondition
  questionConditionDelete(input: QuestionConditionDeleteInput): QuestionCondition

  # Dismisses (marks as seen) an EventNotification
  eventNotificationDismiss(input: EventNotificationEditInput): EventNotification
}

type RootQueryType {
  # A single User
  user(
    # The id of the User
    userId: String!
  ): User

  # All Users (admin only)
  users(
    pageNumber: Int,
    pageSize: Int
  ): UserEdges

  # List of patients the user is on the care team for (their 'patient panel')
  userPatientPanel(
    pageNumber: Int,
    pageSize: Int,
    userId: String
  ): PatientEdges

  # The current User
  currentUser: User

  # A single Patient
  patient(patientId: String!): Patient

  # Patient's Athena health record
  patientHealthRecord(patientId: String!): PatientHealthRecord

  # Users on a care team
  patientCareTeam(patientId: String!): [User]

  # Patient scratch pad
  patientScratchPad(patientId: String!): PatientScratchPad

  # A single clinic
  clinic(clinicId: String!): Clinic

  # Clinics
  clinics(
    pageNumber: Int,
    pageSize: Int
  ): ClinicEdges

  # Patient encounters
  patientEncounters(patientId: String!): [PatientEncounter]

  # Patient medications
  patientMedications(
    patientId: String!
  ): PatientMedications

  # Task
  task(taskId: String!): Task

  # Patient's Tasks
  tasksForPatient(
    patientId: String!
    pageNumber: Int
    pageSize: Int
    orderBy: TaskOrderOptions
  ): TaskEdges

  # Current user's Tasks
  tasksForCurrentUser(
    pageNumber: Int
    pageSize: Int
    orderBy: TaskOrderOptions
  ): TaskEdges

  # List of task comments
  taskComments(
    pageNumber: Int,
    pageSize: Int,
    taskId: String!
  ): TaskCommentEdges

  # Single task comment
  taskComment(taskCommentId: String!): TaskComment

  # RiskArea
  riskArea(riskAreaId: String!): RiskArea

  # RiskAreas
  riskAreas: [RiskArea]

  # Question
  question(questionId: String!): Question

  # Questions
  questionsForRiskArea(riskAreaId: String!): [Question]!

  # Answer
  answer(answerId: String!): Answer

  # Answers
  answersForQuestion(questionId: String!): [Answer]!

  # PatientAnswer
  patientAnswer(patientAnswerId: String!): PatientAnswer

  # PatientAnswersForQuestion
  patientAnswersForQuestion(questionId: String!, patientId: String!): [PatientAnswer]

  # PatientPreviousAnswersForQuestion
  patientPreviousAnswersForQuestion(questionId: String!, patientId: String!): [PatientAnswer]

  # QuestionCondition
  questionCondition(questionConditionId: String!): QuestionCondition

  # Event notifications for a user
  eventNotificationsForCurrentUser(
    pageNumber: Int,
    pageSize: Int,
    taskEventNotificationsOnly: Boolean
  ): EventNotificationEdges

  # Event notifications for a task
  eventNotificationsForTask(
    taskId: String!,
    pageNumber: Int,
    pageSize: Int,
  ): EventNotificationEdges
}

schema {
  query: RootQueryType
  mutation: RootMutationType
}
