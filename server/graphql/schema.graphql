scalar DateTime

# An object with a Globally Unique ID
interface uniqueId {
  # The ID of the object.
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  deletedAt: DateTime
}

enum PokeType {
  normal
  grass
  fire
  water
  electric
  psychic
  ghost
  dark
  fairy
  rock
  ground
  steel
  flying
  fighting
  bug
  ice
  dragon
  poison
}

type Pokemon implements uniqueId {
  id: ID!
  pokemonNumber: Int!
  name: String!
  attack: Int!
  defense: Int!
  moves: [String!]!
  pokeType: PokeType!
  imageUrl: String!
  createdAt: DateTime!
  updatedAt: DateTime!
  deletedAt: DateTime
  item: [Item]!
}

type Item implements uniqueId {
  id: ID!
  name: String!
  pokemonId: String!
  price: Int!
  happiness: Int!
  imageUrl: String!
  createdAt: DateTime!
  updatedAt: DateTime!
  deletedAt: DateTime
}

input PokemonCreateInput {
  pokemonNumber: Int!
  name: String!
  attack: Int!
  defense: Int!
  moves: [String!]!
  pokeType: PokeType!
  imageUrl: String!
}

input PokemonEditInput {
  id: ID!
  pokemonNumber: Int!
  name: String!
  attack: Int!
  defense: Int!
  moves: [String!]!
  pokeType: PokeType!
  imageUrl: String!
}

input ItemCreateInput {
  name: String!
  pokemonId: String!
  happiness: Int!
  price: Int!
  imageUrl: String!
}

input ItemEditInput {
  id: ID!
  name: String!
  pokemonId: String!
  happiness: Int!
  price: Int!
  imageUrl: String!
}

type RootMutationType {
  createPokemon(input: PokemonCreateInput!): Pokemon!
  editPokemon(input: PokemonEditInput!): Pokemon!
  deletePokemon(pokemonId: String!): Pokemon!
  createItem(input: ItemCreateInput!): Item!
  editItem(input: ItemEditInput!): Item!
  deleteItem(itemId: String!): Item!
}

type RootQueryType {
  allPokemon: [Pokemon!]!
  singlePokemon(pokemonId: String): Pokemon!
  singleItem(itemId: String): Item!
}

schema {
  query: RootQueryType
  mutation: RootMutationType
}
