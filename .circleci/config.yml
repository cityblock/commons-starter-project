version: 2
jobs:
  lint:
    working_directory: ~/repo
    docker:
      - image: node:8.10.0@sha256:aa231490fa207f5d255007d3187a3b4e2671eb596837d84b5138505c0095267a
    steps:
      - checkout
      - restore_cache:
          keys:
            - v3-dependencies-{{ arch }}-{{ checksum "package.json" }}
            # fallback to using the latest cache if no exact match is found
            - v3-dependencies-
      - run: yarn install
      - save_cache:
          key: v3-dependencies-{{ arch }}-{{ checksum "package.json" }}
          paths:
            - ./node_modules
      - run: yarn lint
      - run: yarn stylelint
      - run:
          name: check-schema
          command: './scripts/check-schema-in-sync.sh'
      - run: yarn codegen

  test_frontend:
    working_directory: ~/repo
    docker:
      - image: node:8.10.0@sha256:aa231490fa207f5d255007d3187a3b4e2671eb596837d84b5138505c0095267a
    steps:
      - checkout
      - restore_cache:
          keys:
            - v3-dependencies-{{ arch }}-{{ checksum "package.json" }}
            # fallback to using the latest cache if no exact match is found
            - v3-dependencies-
      - run: yarn install
      - save_cache:
          key: v3-dependencies-{{ arch }}-{{ checksum "package.json" }}
          paths:
            - ./node_modules
      - run: yarn test:frontend

  test_api:
    working_directory: ~/repo
    docker:
      - image: node:8.10.0@sha256:aa231490fa207f5d255007d3187a3b4e2671eb596837d84b5138505c0095267a
      - image: postgres:10.3@sha256:e2688f79c920bbd5bcb8e1ed54aef522c7e93a1a5eab32e10b4b020d49b4b925
        environment:
          POSTGRES_DB: commons_test
          POSTGRES_USER: root
          POSTGRES_PASSWORD: ""
      - image: redis:4.0.8
    steps:
      - checkout
      - run: apt-get update && apt-get install -y sudo
      - run:
          name: install dockerize
          command: wget https://github.com/jwilder/dockerize/releases/download/$DOCKERIZE_VERSION/dockerize-linux-amd64-$DOCKERIZE_VERSION.tar.gz && sudo tar -C /usr/local/bin -xzvf dockerize-linux-amd64-$DOCKERIZE_VERSION.tar.gz && rm dockerize-linux-amd64-$DOCKERIZE_VERSION.tar.gz
          environment:
            DOCKERIZE_VERSION: v0.3.0
      - restore_cache:
          keys:
            - v3-dependencies-{{ arch }}-{{ checksum "package.json" }}
            # fallback to using the latest cache if no exact match is found
            - v3-dependencies-
      - run: yarn install
      - save_cache:
          key: v3-dependencies-{{ arch }}-{{ checksum "package.json" }}
          paths:
            - ./node_modules
      - run:
          name: Wait for DB
          command: dockerize -wait tcp://localhost:5432 -timeout 1m
      - run:
          name: Wait for Redis
          command: dockerize -wait tcp://localhost:6379 -timeout 1m
      - run: yarn test:api

  test_models:
    working_directory: ~/repo
    docker:
      - image: node:8.10.0@sha256:aa231490fa207f5d255007d3187a3b4e2671eb596837d84b5138505c0095267a
      - image: postgres:10.3@sha256:e2688f79c920bbd5bcb8e1ed54aef522c7e93a1a5eab32e10b4b020d49b4b925
        environment:
          POSTGRES_DB: commons_test
          POSTGRES_USER: root
          POSTGRES_PASSWORD: ""
    steps:
      - checkout
      - run: apt-get update && apt-get install -y sudo
      - run:
          name: install dockerize
          command: wget https://github.com/jwilder/dockerize/releases/download/$DOCKERIZE_VERSION/dockerize-linux-amd64-$DOCKERIZE_VERSION.tar.gz && sudo tar -C /usr/local/bin -xzvf dockerize-linux-amd64-$DOCKERIZE_VERSION.tar.gz && rm dockerize-linux-amd64-$DOCKERIZE_VERSION.tar.gz
          environment:
            DOCKERIZE_VERSION: v0.3.0
      - restore_cache:
          keys:
            - v3-dependencies-{{ arch }}-{{ checksum "package.json" }}
            # fallback to using the latest cache if no exact match is found
            - v3-dependencies-
      - run: yarn install
      - save_cache:
          key: v3-dependencies-{{ arch }}-{{ checksum "package.json" }}
          paths:
            - ./node_modules
      - run:
          name: Wait for DB
          command: dockerize -wait tcp://localhost:5432 -timeout 1m
      - run: yarn test:models

  deploy_staging:
    working_directory: ~/repo
    docker:
      - image: node:8.10.0@sha256:aa231490fa207f5d255007d3187a3b4e2671eb596837d84b5138505c0095267a
    steps:
      - checkout
      - run:
          name: known-hosts
          command: ssh-keyscan -H beta.aptible.com >> ~/.ssh/known_hosts
      - add_ssh_keys:
          fingerprints:
            - "41:eb:14:fe:32:9c:da:a5:fa:3c:3b:c4:69:18:a8:fd"
      - run:
          name: deploy
          command: git push git@beta.aptible.com:cityblock-health-phi-ready/commons-staging.git $CIRCLE_SHA1:master

  deploy_production:
    working_directory: ~/repo
    docker:
      - image: node:8.10.0@sha256:aa231490fa207f5d255007d3187a3b4e2671eb596837d84b5138505c0095267a
    steps:
      - checkout
      - run:
          name: known-hosts
          command: ssh-keyscan -H beta.aptible.com >> ~/.ssh/known_hosts
      - add_ssh_keys:
          fingerprints:
            - "41:eb:14:fe:32:9c:da:a5:fa:3c:3b:c4:69:18:a8:fd"
      - run:
          name: deploy
          command: git push git@beta.aptible.com:cityblock-health-phi-ready/commons-production.git $CIRCLE_SHA1:master

workflows:
  version: 2

  test_and_deploy:
    jobs:
      - lint:
          filters:
            tags:
              only: /.*/
      - test_frontend:
          filters:
            tags:
              only: /.*/
      - test_api:
          filters:
            tags:
              only: /.*/
      - test_models:
          filters:
            tags:
              only: /.*/
      - deploy_staging:
          requires:
            - lint
            - test_frontend
            - test_api
            - test_models
          filters:
            branches:
              only: master
      - deploy_production:
          requires:
            - lint
            - test_frontend
            - test_api
            - test_models
          filters:
            tags:
              only: /.*/
            branches:
              ignore: /.*/
