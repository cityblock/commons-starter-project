enum UserRole {
  physician
  nurseCareManager
  primaryCarePhysician
  communityHealthPartner
  outreachSpecialist
  psychiatrist
  healthCoach
  familyMember
  anonymousUser
  admin
}

enum ConcernOrderOptions {
  createdAtDesc
  createdAtAsc
  titleDesc
  titleAsc
  updatedAtDesc
  updatedAtAsc
}

enum GoalSuggestionOrderOptions {
  createdAtDesc
  createdAtAsc
  titleDesc
  titleAsc
  updatedAtDesc
  updatedAtAsc
}

enum TaskOrderOptions {
  createdAtDesc
  createdAtAsc
  dueAtDesc
  dueAtAsc
  updatedAtDesc
  updatedAtAsc
  titleAsc
  titleDesc
}

enum UserTaskOrderOptions {
  dueAtAsc
  priorityDesc
  patientAsc
}

enum UserOrderOptions {
  createdAtDesc
  createdAtAsc
  lastLoginAtDesc
  lastLoginAtAsc
  updatedAtDesc
  updatedAtAsc
  emailAsc
}

enum ComputedFieldOrderOptions {
  labelDesc
  labelAsc
  slugDesc
  slugAsc
}

enum AnswerValueTypeOptions {
  string
  boolean
  number
}

enum RiskAdjustmentTypeOptions {
  inactive
  increment
  forceHighRisk
}

enum AnswerTypeOptions {
  dropdown
  radio
  freetext
  multiselect
}

enum QuestionConditionTypeOptions {
  allTrue
  oneTrue
}

enum QuestionFilterType {
  progressNoteTemplate
  riskArea
  screeningTool
}

enum AnswerFilterType {
  question
  progressNote
  riskArea
  screeningTool
}

enum TaskEventTypes {
  create_task
  add_follower
  remove_follower
  complete_task
  uncomplete_task
  delete_task
  add_comment
  edit_comment
  delete_comment
  edit_priority
  edit_due_date
  edit_assignee
  edit_title
  edit_description
  cbo_referral_edit_sent_at
  cbo_referral_edit_acknowledged_at
}

enum CarePlanUpdateEventTypes {
  create_patient_concern
  edit_patient_concern
  delete_patient_concern
  create_patient_goal
  edit_patient_goal
  delete_patient_goal
}

enum PatientAnswerEventTypes {
  create_patient_answer
}

enum CompletedWithinInterval {
  hour
  day
  week
  month
  year
}

enum Priority {
  low
  medium
  high
}

enum CarePlanSuggestionType {
  concern
  goal
}

enum QuickCallDirection {
  Inbound
  Outbound
}

enum ComputedFieldDataTypes {
  boolean
  string
  number
}

enum AssessmentType {
  automated
  manual
}

enum Gender {
  male
  female
  nonbinary
  selfDescribed
  pass
}

enum MaritalStatus {
  currentlyMarried
  widowed
  divorced
  separated
  neverMarried
}

enum Transgender {
  yes
  no
  pass
}

enum Permissions {
  green
  pink
  orange
  blue
  yellow
  red
  black
}

enum CoreIdentityOptions {
  firstName
  middleName
  lastName
  dateOfBirth
}

enum PhoneTypeOptions {
  home
  work
  mobile
  other
}

enum ContactMethodOptions {
  phone
  text
  email
}

enum CurrentPatientState {
  attributed
  assigned
  outreach
  consented
  enrolled
  disenrolled
  ineligible
}

enum PatientRelationOptions {
  parent
  grandparent
  child
  sibling
  grandchild
  roommate
  friend
  neighbor
  partner
  spouse
  other
}

enum ExternalProviderOptions {
  substanceUseCounselor
  therapistMentalHealth
  therapistPhysical
  psychiatrist
  dialysis
  housingCaseManager
  hasaCaseManager
  pharmacy
  homeAttendant
  visitingNurse
  durableMedicalEquipment
  healthHomeCareManager
  insurancePlanCareManager
  otherCaseManagement
  formalCaregiver
  other
  urology
  endocrinology
  ophthalmology
  cardiology
  podiatry
  orthopedics
  infectiousDisease
  obgyn
  pulmonology
  nephrology
  hepatology
  gastroenterology
  ent
  vascular
  oncology
  hematology
  dermatology
  otherMedicalSpecialist
}

enum PatientSignedUrlAction {
  read
  write
  delete
}

enum UserSignedUrlAction {
  read
  write
}

enum DocumentTypeOptions {
  cityblockConsent
  hipaaConsent
  hieHealthixConsent
  hcp
  molst
}

enum SmsMessageDirection {
  toUser
  fromUser
}

enum GoogleCalendarEventType {
  cityblock
  siu
}

# User account model
type User implements uniqueId {
  id: ID!
  locale: String
  phone: String
  firstName: String
  lastName: String
  email: String
  userRole: UserRole!
  homeClinicId: ID!
  googleProfileImageUrl: String
  createdAt: String!
  updatedAt: String!
  permissions: Permissions!
  twilioSimId: String
}

type UserWithCount {
  id: ID!
  firstName: String
  lastName: String
  userRole: UserRole!
  googleProfileImageUrl: String
  patientCount: Int
  email: String
}

type CareTeamUser implements uniqueId {
  id: ID!
  locale: String
  phone: String
  firstName: String
  lastName: String
  email: String
  userRole: UserRole!
  homeClinicId: ID!
  googleProfileImageUrl: String
  createdAt: String!
  updatedAt: String!
  permissions: Permissions!
  isCareTeamLead: Boolean!
  twilioSimId: String
}

# The user account with an optional auth token
type UserWithAuthToken {
  user: User!
  # The auth token to allow for quick login. JWT passed back in via headers for further requests
  authToken: String
}

# User node
type UserNode {
  node: User
  cursor: String!
}

# User edges
type UserEdges {
  edges: [UserNode]
  pageInfo: PageInfo!
}

# An object with a Globally Unique ID
interface uniqueId {
  # The ID of the object.
  id: ID!
}

# Page info for paginated responses
type PageInfo {
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
}

# Patient combining data in athena and our database
type Patient implements uniqueId {
  id: ID!
  patientInfo: PatientInfo!
  firstName: String!
  middleName: String
  lastName: String!
  dateOfBirth: String
  ssnEnd: String
  nmi: String
  mrn: String
  cityblockId: Int!
  homeClinicId: ID
  createdAt: String!
  careTeam: [User!]
  patientDataFlags: [PatientDataFlag!]
  computedPatientStatus: ComputedPatientStatus!
  patientState: PatientState!
  coreIdentityVerifiedAt: String
  coreIdentityVerifiedById: ID
}

# Patient info that is editable in Commons
type PatientInfo implements uniqueId {
  id: ID!
  patientId: ID!
  preferredName: String
  gender: Gender
  genderFreeText: String
  transgender: Transgender
  maritalStatus: MaritalStatus
  language: String
  isMarginallyHoused: Boolean
  primaryAddress: Address
  primaryPhone: Phone
  hasEmail: Boolean
  primaryEmail: Email
  preferredContactMethod: ContactMethodOptions
  canReceiveCalls: Boolean
  canReceiveTexts: Boolean
  hasHealthcareProxy: Boolean
  hasMolst: Boolean
  hasDeclinedPhotoUpload: Boolean
  hasUploadedPhoto: Boolean
  needToKnow: String
  googleCalendarId: String
}

# Patient contact that is editable in Commons
type PatientContact implements uniqueId {
  id: ID!
  patientId: ID!
  relationToPatient: PatientRelationOptions!
  relationFreeText: String
  firstName: String!
  lastName: String!
  isEmergencyContact: Boolean!
  isHealthcareProxy: Boolean!
  canContact: Boolean!
  description: String
  phone: Phone!
  address: Address
  email: Email
  createdAt: String
  updatedAt: String
  deletedAt: String
}

# Patient external provider that is editable in Commons
type PatientExternalProvider implements uniqueId {
  id: ID!
  patientId: ID!
  role: ExternalProviderOptions!
  roleFreeText: String
  agencyName: String!
  firstName: String
  lastName: String
  description: String
  phone: Phone!
  email: Email
  createdAt: String
  updatedAt: String
  deletedAt: String
}

# Documents and consents for a user
type PatientDocument implements uniqueId {
  id: ID!
  patientId: ID!
  uploadedBy: User!
  filename: String!
  description: String
  documentType: DocumentTypeOptions
  createdAt: String!
}

# ComputedPatientStatus
type ComputedPatientStatus implements uniqueId {
  id: ID!
  patientId: ID!
  updatedById: ID!
  isCoreIdentityVerified: Boolean!
  isDemographicInfoUpdated: Boolean!
  isEmergencyContactAdded: Boolean!
  isAdvancedDirectivesAdded: Boolean!
  isConsentSigned: Boolean!
  isPhotoAddedOrDeclined: Boolean!
  isIneligible: Boolean!
  isDisenrolled: Boolean!
  createdAt: String!
  updatedAt: String!
  deletedAt: String
}

# PatientState
type PatientState implements uniqueId {
  id: ID!
  patientId: ID!
  updatedById: ID!
  currentState: CurrentPatientState!
  createdAt: String!
  updatedAt: String!
  deletedAt: String
}

input PatientFilterOptions {
  ageMin: Int
  ageMax: Int
  gender: Gender
  zip: String
  careWorkerId: ID
  patientState: CurrentPatientState
}

# Address
type Address implements uniqueId {
  id: ID!
  zip: String
  street1: String
  street2: String
  state: String
  city: String
  description: String
}

# params for creating or editing address in the db
input AddressInput {
  addressId: ID
  zip: String
  street1: String
  street2: String
  state: String
  city: String
  description: String
}

# Editable fields on an address
input AddressEditInput {
  addressId: ID!
  patientId: ID!
  zip: String
  street1: String
  street2: String
  state: String
  city: String
  description: String
}

# params for creating an address in the db
input AddressCreateInput {
  zip: String
  street1: String
  street2: String
  state: String
  city: String
  description: String
}

# params for creating and address for a patient in the db
input AddressCreateForPatientInput {
  patientId: ID!
  zip: String
  street1: String
  street2: String
  state: String
  city: String
  description: String
  isPrimary: Boolean
}

# params for deleting an address for a patient in the db
input AddressDeleteForPatientInput {
  patientId: ID!
  addressId: ID!
  isPrimary: Boolean
}

# Phone
type Phone implements uniqueId {
  id: ID!
  phoneNumber: String!
  type: PhoneTypeOptions!
  description: String
}

# params for creating or editing phone in the db
input PhoneInput {
  phoneId: ID
  phoneNumber: String!
  type: PhoneTypeOptions
  description: String
}

# params for creating a phone
input PhoneCreateInput {
  phoneNumber: String!
  type: PhoneTypeOptions!
  description: String
}

# params for creating a phone for a patient in the db
input PhoneCreateForPatientInput {
  patientId: ID!
  phoneNumber: String!
  type: PhoneTypeOptions!
  description: String
  isPrimary: Boolean
}

# params for deleting a phone for a patient in the db
input PhoneDeleteForPatientInput {
  patientId: ID!
  phoneId: ID!
  isPrimary: Boolean
}

# Email
type Email implements uniqueId {
  id: ID!
  emailAddress: String!
  description: String
}

# params for creating or editing an email in the db
input EmailInput {
  emailAddress: String!
  description: String
}

# Editable fields on an email
input EmailEditInput {
  emailId: ID!
  patientId: ID!
  emailAddress: String!
  description: String
}

# params for creating an email
input EmailCreateInput {
  emailAddress: String!
  description: String
}

# params for creating and email for a patient in the db
input EmailCreateForPatientInput {
  patientId: ID!
  emailAddress: String!
  description: String
  isPrimary: Boolean
}

# params for deleting an email for a patient in the db
input EmailDeleteForPatientInput {
  patientId: ID!
  emailId: ID!
  isPrimary: Boolean
}

# params for creating a current user calendar event
input CalendarCreateEventForCurrentUserInput {
  startDatetime: String!
  endDatetime: String!
  inviteeEmails: [String!]!
  location: String!
  title: String!
  reason: String!
}

# params for creating a patient calendar
input CalendarCreateForPatientInput {
  patientId: ID!
}

# params for creating a patient calendar event
input CalendarCreateEventForPatientInput {
  patientId: ID!
  googleCalendarId: String!
  startDatetime: String!
  endDatetime: String!
  inviteeEmails: [String!]!
  location: String!
  title: String!
  reason: String!
}

# Patient node
type PatientNode {
  node: Patient
  cursor: String!
}

# Patient edges
type PatientEdges {
  edges: [PatientNode!]!
  pageInfo: PageInfo!
}

# Patient table row
type PatientTableRow implements uniqueId {
  id: ID!
  firstName: String!
  lastName: String!
  cityblockId: Int!
  dateOfBirth: String
  userCareTeam: Boolean
  patientInfo: PatientInfo!
  patientState: PatientState!
}

# Patient table row node
type PatientTableRowNode {
  node: PatientTableRow
  cursor: String!
}

# Patient table row edges
type PatientTableRowEdges {
  edges: [PatientTableRowNode!]!
  pageInfo: PageInfo!
  totalCount: Int!
}

# Patient dashboard item
type PatientForDashboard implements uniqueId {
  id: ID!
  firstName: String!
  lastName: String!
  dateOfBirth: String
  cityblockId: Int!
  patientInfo: PatientInfo!
  patientState: PatientState!
  computedPatientStatus: ComputedPatientStatus!
}

# Patient dashboard item node
type PatientForDashboardNode {
  node: PatientForDashboard
  cursor: String!
}

# Patient dashboard item edges
type PatientForDashboardEdges {
  edges: [PatientForDashboardNode!]!
  pageInfo: PageInfo!
  totalCount: Int!
}

# Clinic node
type ClinicNode {
  node: Clinic!
  cursor: String!
}

# Clinic edges
type ClinicEdges {
  edges: [ClinicNode!]!
  pageInfo: PageInfo!
}

# Clinic
type Clinic implements uniqueId {
  id: ID!
  name: String!
  departmentId: Int!
  createdAt: String!
  updatedAt: String!
}

# PatientProblem
type PatientDiagnosis {
  id: ID!
  name: String!
  code: String!
  startDate: String!
  endDate: String!
}

# PatientMedication
type PatientMedication {
  id: ID!
  name: String!
  dosage: String!
  startDate: String!
  endDate: String!
}

# PatientEncounter
type PatientEncounter {
  id: ID!
  location: String
  source: String
  date: String!
  title: String
  notes: String
  progressNoteId: String
}

# PatientProgressNoteId
type PatientProgressNoteId {
  id: ID!
  createdAt: String!
}

# Patient Scratch Pad
type PatientNeedToKnow {
  text: String
}

# Task
type Task implements uniqueId {
  id: ID!
  title: String!
  description: String
  patient: Patient!
  patientId: ID!
  dueAt: String
  priority: Priority
  createdBy: User!
  createdAt: String!
  updatedAt: String!
  deletedAt: String
  completedBy: User
  completedAt: String
  assignedToId: ID
  assignedTo: User
  followers: [User!]!
  patientGoalId: ID!
  patientGoal: PatientGoalShort!
  CBOReferralId: ID
  CBOReferral: CBOReferral
}

# Task ID
type TaskId implements uniqueId {
  id: ID!
}

# Task node
type TaskNode {
  node: Task
  cursor: String!
}

# Task edges
type TaskEdges {
  edges: [TaskNode!]!
  pageInfo: PageInfo!
}

# Task with patient image edges
type TaskWithImageEdges {
  edges: [TaskNode!]!
  pageInfo: PageInfo!
}

# Task comment
type TaskComment implements uniqueId {
  id: ID!
  body: String!
  user: User!
  taskId: ID!
  createdAt: String!
  updatedAt: String
}

# Task comment node
type TaskCommentNode {
  node: TaskComment
  cursor: String!
}

# Task comment edges
type TaskCommentEdges {
  edges: [TaskCommentNode!]!
  pageInfo: PageInfo!
}

# Answer
type Answer implements uniqueId {
  id: ID!
  createdAt: String!
  updatedAt: String!
  deletedAt: String
  displayValue: String!
  value: String!
  valueType: AnswerValueTypeOptions!
  riskAdjustmentType: RiskAdjustmentTypeOptions
  inSummary: Boolean
  summaryText: String
  questionId: ID!
  order: Int!
  concernSuggestions: [Concern!]
  goalSuggestions: [GoalSuggestionTemplate]
  riskArea: RiskAreaShort
  screeningTool: ScreeningToolShort
}

# Answer with Patient answer
type AnswerWithPatientAnswer implements uniqueId {
  id: ID!
  createdAt: String!
  updatedAt: String!
  deletedAt: String
  displayValue: String!
  value: String!
  valueType: AnswerValueTypeOptions!
  riskAdjustmentType: RiskAdjustmentTypeOptions
  inSummary: Boolean
  summaryText: String
  questionId: ID!
  order: Int!
  concernSuggestions: [Concern!]
  goalSuggestions: [GoalSuggestionTemplate]
  riskAreaId: String
  screeningToolId: String
  patientAnswers: [PatientAnswer!]!
}

# PatientAnswer
type PatientAnswer implements uniqueId {
  id: ID!
  createdAt: String!
  updatedAt: String!
  deletedAt: String
  answer: Answer!
  answerId: ID!
  answerValue: String!
  patientId: ID!
  applicable: Boolean
  questionId: String
  question: Question
  patientScreeningToolSubmissionId: ID
  patientScreeningToolSubmission: PatientScreeningToolSubmission
  riskAreaAssessmentSubmissionId: ID
  riskAreaAssessmentSubmission: RiskAreaAssessmentSubmission
}

# Question
type Question implements uniqueId {
  id: ID!
  createdAt: String!
  updatedAt: String!
  deletedAt: String
  title: String!
  validatedSource: String
  answers: [Answer!]
  answerType: AnswerTypeOptions!
  riskAreaId: ID
  screeningToolId: ID
  progressNoteTemplateId: ID
  applicableIfQuestionConditions: [QuestionCondition!]!
  applicableIfType: QuestionConditionTypeOptions
  order: Int!
  computedFieldId: ID
  computedField: ComputedField
  otherTextAnswerId: String
}

# Question with patient answer
type QuestionWithPatientAnswer implements uniqueId {
  id: ID!
  createdAt: String!
  updatedAt: String!
  deletedAt: String
  title: String!
  validatedSource: String
  answers: [AnswerWithPatientAnswer!]
  answerType: AnswerTypeOptions!
  riskAreaId: ID
  screeningToolId: ID
  progressNoteTemplateId: ID
  applicableIfQuestionConditions: [QuestionCondition!]!
  applicableIfType: QuestionConditionTypeOptions
  order: Int!
  computedFieldId: ID
  computedField: ComputedField
  otherTextAnswerId: String
}

# QuestionCondition
type QuestionCondition implements uniqueId {
  id: ID!
  createdAt: String!
  updatedAt: String!
  deletedAt: String
  answerId: ID!
  questionId: ID!
}

# Risk Area Group
type RiskAreaGroup implements uniqueId {
  id: ID!
  createdAt: String!
  updatedAt: String!
  deletedAt: String
  title: String!
  shortTitle: String!
  order: Int!
  mediumRiskThreshold: Int!
  highRiskThreshold: Int!
  riskAreas: [RiskArea!]
}

type RiskAreaGroupForPatient implements uniqueId {
  id: ID!
  createdAt: String!
  updatedAt: String!
  deletedAt: String
  title: String!
  shortTitle: String!
  order: Int!
  mediumRiskThreshold: Int!
  highRiskThreshold: Int!
  riskAreas: [RiskAreaForPatient!]!
}

type ScreeningToolResultSummary {
  title: String!
  score: Int
  description: String!
}

type FullRiskAreaGroupForPatient implements uniqueId {
  id: ID!
  createdAt: String!
  updatedAt: String!
  deletedAt: String
  title: String!
  shortTitle: String!
  order: Int!
  mediumRiskThreshold: Int!
  highRiskThreshold: Int!
  riskAreas: [RiskAreaForPatient!]!
  automatedSummaryText: [String!]!
  manualSummaryText: [String!]!
  screeningToolResultSummaries: [ScreeningToolResultSummary!]!
  lastUpdated: String
  forceHighRisk: Boolean!
  totalScore: Int
  riskScore: Priority
}

# Risk Area
type RiskArea implements uniqueId {
  id: ID!
  createdAt: String!
  updatedAt: String!
  deletedAt: String
  title: String!
  assessmentType: AssessmentType!
  riskAreaGroupId: ID!
  order: Int!
  mediumRiskThreshold: Int!
  highRiskThreshold: Int!
  questions: [Question!]
  screeningTools: [ScreeningTool!]
}

type RiskAreaShort implements uniqueId {
  id: ID!
  title: String!
}

type RiskAreaForPatient implements uniqueId {
  id: ID!
  createdAt: String!
  updatedAt: String!
  deletedAt: String
  title: String!
  assessmentType: AssessmentType!
  riskAreaGroupId: ID!
  order: Int!
  mediumRiskThreshold: Int!
  highRiskThreshold: Int!
  questions: [QuestionWithPatientAnswer!]!
  riskAreaAssessmentSubmissions: [RiskAreaAssessmentSubmission!]!
  screeningTools: [ScreeningToolForPatient!]!
  lastUpdated: String
  forceHighRisk: Boolean!
  totalScore: Int
  riskScore: Priority
  summaryText: [String!]!
}

type RiskScore {
  score: Int!
  forceHighRisk: Boolean!
}

type RiskAreaSummary {
  summary: [String!]!
  started: Boolean!
  lastUpdated: String
}

type RiskAreaStatistic {
  riskArea: RiskArea!
  summaryData: RiskAreaSummary!
  scoreData: RiskScore!
}

type ThreeSixtySummary {
  riskAreas: [RiskAreaStatistic!]!
}

# Task Event
type TaskEvent implements uniqueId {
  id: ID!
  taskId: ID!
  task: Task!
  userId: ID!
  user: User!
  eventType: TaskEventTypes
  eventCommentId: ID
  eventComment: TaskComment
  eventUserId: ID
  eventUser: User
  progressNoteId: ID
  progressNote: ProgressNote
  createdAt: String!
  updatedAt: String!
  deletedAt: String
}

# Care Plan Update Event
type CarePlanUpdateEvent implements uniqueId {
  id: ID!
  patientId: ID!
  patient: Patient!
  userId: ID!
  user: User!
  patientConcernId: ID
  patientGoalId: ID
  patientConcern: PatientConcern
  patientGoal: PatientGoal
  eventType: CarePlanUpdateEventTypes!
  progressNoteId: ID
  progressNote: ProgressNote
  createdAt: String!
  updatedAt: String!
  deletedAt: String
}

# Patient Answer Event
type PatientAnswerEvent implements uniqueId {
  id: ID!
  patientId: ID!
  patient: Patient!
  userId: ID!
  user: User!
  patientAnswerId: ID!
  patientAnswer: PatientAnswer!
  previousPatientAnswerId: ID
  previousPatientAnswer: PatientAnswer
  eventType: PatientAnswerEventTypes!
  progressNoteId: ID
  progressNote: ProgressNote
  createdAt: String!
  updatedAt: String!
  deletedAt: String
}

# Event Notification
type EventNotification implements uniqueId {
  id: ID!
  title: String
  userId: ID!
  user: User!
  taskEventId: ID
  taskEvent: TaskEvent
  seenAt: String
  emailSentAt: String
  deliveredAt: String
  createdAt: String!
  updatedAt: String!
  deletedAt: String
}

# Event Notification node
type EventNotificationNode {
  node: EventNotification
  cursor: String!
}

# Event Notification edges
type EventNotificationEdges {
  edges: [EventNotificationNode!]!
  pageInfo: PageInfo!
}

# Concern
type Concern implements uniqueId {
  id: ID!
  title: String!
  diagnosisCodes: [DiagnosisCode!]
  createdAt: String!
  updatedAt: String!
  deletedAt: String
}

# DiagnosisCode
type DiagnosisCode implements uniqueId {
  id: ID!
  codesetName: String!
  label: String!
  code: String!
  version: String!
  createdAt: String!
  updatedAt: String!
  deletedAt: String
}

# ConcernDiagnosisCode
type ConcernDiagnosisCode implements uniqueId {
  id: ID!
  concernId: String!
  diagnosisCodeId: String!
  createdAt: String!
  updatedAt: String!
  deletedAt: String
}

type PatientGoal implements uniqueId {
  id: ID!
  title: String!
  patientId: ID!
  patient: Patient!
  patientConcernId: ID
  patientConcern: PatientConcern
  goalSuggestionTemplateId: ID
  goalSuggestionTemplate: GoalSuggestionTemplate
  tasks: [Task!]!
  createdAt: String!
  updatedAt: String!
  deletedAt: String
}

type PatientGoalShort implements uniqueId {
  id: ID!
  title: String!
  patientId: ID!
  patientConcernId: ID
  patientConcern: PatientConcern
  goalSuggestionTemplateId: ID
  createdAt: String!
  updatedAt: String!
  deletedAt: String
}

type PatientConcern implements uniqueId {
  id: ID!
  order: Int!
  concernId: ID!
  concern: Concern!
  patientGoals: [PatientGoal!]
  patientId: ID!
  patient: Patient!
  startedAt: String
  completedAt: String
  createdAt: String!
  updatedAt: String!
  deletedAt: String
}

type GoalSuggestionTemplate implements uniqueId {
  id: ID!
  title: String!
  taskTemplates: [TaskTemplate!]!
  createdAt: String!
  updatedAt: String!
  deletedAt: String
}

type TaskTemplate implements uniqueId {
  id: ID!
  title: String!
  completedWithinNumber: Int
  completedWithinInterval: CompletedWithinInterval
  repeating: Boolean
  goalSuggestionTemplateId: ID!
  priority: Priority
  careTeamAssigneeRole: UserRole
  createdAt: String!
  updatedAt: String!
  deletedAt: String
  CBOCategoryId: ID
}

type CarePlanSuggestion implements uniqueId {
  id: ID!
  patientId: ID!
  patient: Patient!
  suggestionType: CarePlanSuggestionType!
  concernId: ID
  concern: Concern
  goalSuggestionTemplateId: ID
  goalSuggestionTemplate: GoalSuggestionTemplate
  acceptedById: ID
  acceptedBy: User
  dismissedById: ID
  dismissedBy: User
  dismissedReason: String
  createdAt: String!
  updatedAt: String!
  dismissedAt: String
  acceptedAt: String
  patientScreeningToolSubmissionId: ID
  patientScreeningToolSubmission: PatientScreeningToolSubmission
  riskAreaAssessmentSubmissionId: ID
  riskAreaAssessmentSubmission: RiskAreaAssessmentSubmission
  computedFieldId: ID
  computedField: ComputedField
}

type CarePlan {
  goals: [PatientGoal!]!
  concerns: [PatientConcern!]!
}

type ScreeningTool implements uniqueId {
  id: ID!
  title: String!
  riskAreaId: ID!
  screeningToolScoreRanges: [ScreeningToolScoreRange!]!
  patientScreeningToolSubmissions: [PatientScreeningToolSubmissionShort!]
  createdAt: String!
  updatedAt: String!
  deletedAt: String
}

type ScreeningToolShort implements uniqueId {
  id: ID!
  title: String!
}

type ScreeningToolForPatient implements uniqueId {
  id: ID!
  title: String!
  patientScreeningToolSubmissions: [PatientScreeningToolSubmission!]!
  createdAt: String!
  updatedAt: String!
  deletedAt: String
}

type ScreeningToolScoreRange implements uniqueId {
  id: ID!
  description: String!
  screeningToolId: ID!
  riskAdjustmentType: RiskAdjustmentTypeOptions!
  minimumScore: Int!
  maximumScore: Int!
  createdAt: String!
  updatedAt: String!
  deletedAt: String
  concernSuggestions: [Concern!]!
  goalSuggestions: [GoalSuggestionTemplate]
}

type ScreeningToolScoreRangeForPatientScreeningToolSubmission implements uniqueId {
  id: ID!
  description: String!
  riskAdjustmentType: RiskAdjustmentTypeOptions!
  createdAt: String!
  updatedAt: String!
  deletedAt: String
}

type PatientScreeningToolSubmission implements uniqueId {
  id: ID!
  progressNoteId: ID!
  patientId: ID!
  patient: Patient!
  userId: ID!
  user: User!
  score: Int
  screeningToolId: ID!
  screeningTool: ScreeningTool!
  createdAt: String!
  updatedAt: String!
  deletedAt: String
  scoredAt: String
  carePlanSuggestions: [CarePlanSuggestion!]!
  screeningToolScoreRangeId: ID
  screeningToolScoreRange: ScreeningToolScoreRangeForPatientScreeningToolSubmission
  patientAnswers: [PatientAnswer!]
}

type PatientScreeningToolSubmissionShort implements uniqueId {
  id: ID!
  progressNoteId: ID!
  patientId: ID!
  patient: Patient!
  userId: ID!
  user: User!
  score: Int
  screeningToolId: ID!
  createdAt: String!
  updatedAt: String!
  deletedAt: String
  scoredAt: String
  screeningToolScoreRangeId: ID
}

type RiskAreaAssessmentSubmission implements uniqueId {
  id: ID!
  riskAreaId: ID!
  patientId: ID!
  patient: Patient!
  userId: ID!
  user: User!
  createdAt: String!
  updatedAt: String!
  deletedAt: String
  completedAt: String
  carePlanSuggestions: [CarePlanSuggestion!]!
  riskArea: RiskArea
}

type ProgressNoteTemplate implements uniqueId {
  id: ID!
  title: String!
  createdAt: String!
  updatedAt: String!
  deletedAt: String
}

type ProgressNote implements uniqueId {
  id: ID!
  patientId: ID!
  patient: Patient!
  userId: ID!
  user: User!
  progressNoteTemplateId: ID
  progressNoteTemplate: ProgressNoteTemplate
  location: String
  summary: String
  memberConcern: String
  completedAt: String
  startedAt: String
  createdAt: String!
  updatedAt: String!
  deletedAt: String
  supervisorId: ID
  supervisor: User
  needsSupervisorReview: Boolean
  reviewedBySupervisorAt: String
  supervisorNotes: String
  worryScore: Int
}

type QuickCall implements uniqueId {
  id: ID!
  progressNoteId: ID!
  progressNote: ProgressNote!
  userId: ID!
  user: User!
  reason: String!
  summary: String!
  direction: QuickCallDirection!
  callRecipient: String!
  wasSuccessful: Boolean!
  startTime: String!
  createdAt: String!
  updatedAt: String!
  deletedAt: String
}

type ProgressNoteActivity {
  taskEvents: [TaskEvent!]!
  patientAnswerEvents: [PatientAnswerEvent!]!
  carePlanUpdateEvents: [CarePlanUpdateEvent!]!
  quickCallEvents: [QuickCall!]!
  patientScreeningToolSubmissions: [PatientScreeningToolSubmission!]!
}

type ComputedField implements uniqueId {
  id: ID!
  slug: String!
  label: String!
  dataType: ComputedFieldDataTypes!
  createdAt: String!
  updatedAt: String!
  deletedAt: String
}

type ComputedFieldSchema {
  slug: String!
  dataType: ComputedFieldDataTypes!
  values: [String!]!
}

type ComputedFieldsSchema {
  computedFields: [ComputedFieldSchema!]!
}

type ComputedFieldFlag implements uniqueId {
  id: ID!
  patientAnswerId: ID!
  userId: ID!
  reason: String
}

type PatientList implements uniqueId {
  id: ID!
  title: String!
  answerId: ID!
  order: Int!
  createdAt: String!
  updatedAt: String!
  deletedAt: String
}

type CBOCategory implements uniqueId {
  id: ID!
  title: String!
  createdAt: String!
  updatedAt: String!
  deletedAt: String
}

type CBO implements uniqueId {
  id: ID!
  name: String!
  categoryId: ID!
  category: CBOCategory!
  address: String!
  city: String!
  state: String!
  zip: String!
  fax: String
  phone: String!
  url: String
  createdAt: String!
  updatedAt: String!
  deletedAt: String
}

type CBOReferral implements uniqueId {
  id: ID!
  categoryId: ID!
  category: CBOCategory!
  CBOId: ID
  CBO: CBO
  name: String
  url: String
  diagnosis: String
  createdAt: String!
  updatedAt: String!
  deletedAt: String
  sentAt: String
  acknowledgedAt: String
}

# JWT token for PDF viewing
type JwtForPdf {
  authToken: String!
}

# JWT for downloading vCard
type JwtForVcf {
  authToken: String!
}

# Patient Data Flag
type PatientDataFlag implements uniqueId {
  id: ID!
  patientId: ID!
  userId: ID!
  fieldName: CoreIdentityOptions!
  suggestedValue: String
  notes: String
  updatedAt: String
}

# Patient Glass Break
type PatientGlassBreak implements uniqueId {
  id: ID!
  userId: ID!
  patientId: ID!
  reason: String!
  note: String
}

# Progress Note Glass Break
type ProgressNoteGlassBreak implements uniqueId {
  id: ID!
  userId: ID!
  progressNoteId: ID!
  reason: String!
  note: String
}

# Patient Glass Break - not needed check
type PatientGlassBreakCheck {
  patientId: ID!
  isGlassBreakNotNeeded: Boolean!
}

# Progress Note Glass Break - not needed check
type ProgressNoteGlassBreakCheck {
  progressNoteId: ID!
  isGlassBreakNotNeeded: Boolean!
}

# Patient Consent Form
type PatientConsentForm {
  patientConsentFormId: ID
  patientId: ID!
  userId: ID
  formId: ID!
  title: String!
  signedAt: String
}

# Patient Advanced Directive Form
type PatientAdvancedDirectiveForm {
  patientAdvancedDirectiveFormId: ID
  patientId: ID!
  userId: ID
  formId: ID!
  title: String!
  signedAt: String
}

# Patient Scratch Pad
type PatientScratchPad implements uniqueId {
  id: ID!
  patientId: ID!
  userId: ID!
  body: String!
}

# Patient Full Social Security Number
type PatientSocialSecurity implements uniqueId {
  id: ID!
  ssn: String
}

# signed url for patient photo or documents
type SignedUrl {
  signedUrl: String!
}

# google calendar url for patient calendar event
type CalendarUrl {
  eventCreateUrl: String!
}

# google calendar id and url for patient calendar
type PatientCalendar {
  patientId: ID!
  googleCalendarId: String
  googleCalendarUrl: String
}

# google calendar id and url for current user calendar
type Calendar {
  googleCalendarId: String!
  googleCalendarUrl: String
}

# Google API page info
type GooglePageInfo {
  nextPageToken: String
  previousPageToken: String
}

# Google calendar event list
type CalendarEventEdges {
  events: [CalendarEvent!]!
  pageInfo: GooglePageInfo
}

# Deep link to mattermost
type MattermostUrl {
  url: String!
}

type CalendarEvent {
  id: String!
  startDate: String!
  startTime: String
  endDate: String!
  endTime: String
  title: String!
  htmlLink: String!
  description: String
  location: String
  guests: [String!]
  eventType: GoogleCalendarEventType
  providerName: String
  providerCredentials: String
}

# SMS message
type SmsMessage implements uniqueId {
  id: ID!
  userId: ID!
  contactNumber: String!
  patientId: String
  direction: SmsMessageDirection!
  body: String!
  createdAt: String!
}

# Patient table row node
type SmsMessageNode {
  node: SmsMessage!
  cursor: String!
}

# Patient table row edges
type SmsMessageEdges {
  edges: [SmsMessageNode!]!
  pageInfo: PageInfo!
  totalCount: Int!
}

#
# BEGIN INPUT FIELDS
#

# params for creating a user
input UserCreateInput {
  email: String!
  homeClinicId: ID!
}

# params for logging in a user
input UserLoginInput {
  googleAuthCode: String!
}

# params for editing a user - only supports user role
input UserEditRoleInput {
  userRole: String!
  email: String!
}

# params for editing a user - only supports permissions
input UserEditPermissionsInput {
  permissions: Permissions!
  email: String!
}

# params for deleting a user
input UserDeleteInput {
  email: String!
}

# params for creating a clinic
input ClinicCreateInput {
  departmentId: Int!
  name: String!
}

# params for adding or removing patient from care team
input CareTeamInput {
  userId: ID!
  patientId: ID!
}

input CareTeamReassignInput {
  userId: ID!
  patientId: ID!
  reassignedToId: ID
}

input CareTeamMakeTeamLeadInput {
  userId: ID!
  patientId: ID!
}

# params for adding multiple patients to a user's care team
input CareTeamAssignInput {
  userId: ID!
  patientIds: [ID!]!
}

# params for editing a patient in the db
input PatientCoreIdentityVerifyInput {
  patientId: ID!
}

# params for editing a patient in the db
input PatientInfoEditInput {
  patientInfoId: ID!
  preferredName: String
  gender: Gender
  genderFreeText: String
  transgender: Transgender
  maritalStatus: MaritalStatus
  language: String
  isMarginallyHoused: Boolean
  primaryAddressId: ID
  hasEmail: Boolean
  primaryEmailId: ID
  primaryPhoneId: ID
  preferredContactMethod: ContactMethodOptions
  canReceiveCalls: Boolean
  canReceiveTexts: Boolean
  hasHealthcareProxy: Boolean
  hasMolst: Boolean
  hasDeclinedPhotoUpload: Boolean
  hasUploadedPhoto: Boolean
}

# params for creating a patient contact in the db
input PatientContactCreateInput {
  patientId: ID!
  relationToPatient: PatientRelationOptions!
  relationFreeText: String
  firstName: String!
  lastName: String!
  phone: PhoneCreateInput!
  isEmergencyContact: Boolean
  isHealthcareProxy: Boolean
  canContact: Boolean
  description: String
  address: AddressCreateInput
  email: EmailCreateInput
}

# params for deleting a patient contact and all associated models in the db
input PatientContactDeleteInput {
  patientContactId: ID!
}

# params for editing a patient contact in the db
input PatientContactEditInput {
  patientContactId: ID!
  relationToPatient: PatientRelationOptions
  relationFreeText: String
  firstName: String
  lastName: String
  isEmergencyContact: Boolean
  isHealthcareProxy: Boolean
  canContact: Boolean
  description: String
  address: AddressInput
  email: EmailInput
  phone: PhoneInput
}

# params for creating a patient external provider in the db
input PatientExternalProviderCreateInput {
  patientId: ID!
  role: ExternalProviderOptions!
  roleFreeText: String
  firstName: String
  lastName: String
  phone: PhoneCreateInput!
  agencyName: String!
  description: String
  email: EmailCreateInput
}

# params for deleting a patient external provider and all associated models in the db
input PatientExternalProviderDeleteInput {
  patientExternalProviderId: ID!
}

# params for editing a patient external provider in the db
input PatientExternalProviderEditInput {
  patientExternalProviderId: ID!
  role: ExternalProviderOptions
  roleFreeText: String
  firstName: String
  lastName: String
  agencyName: String
  description: String
  email: EmailInput
  phone: PhoneInput
}

# params for creating a patient document in the db
input PatientDocumentCreateInput {
  id: ID
  patientId: ID!
  filename: String!
  description: String
  documentType: DocumentTypeOptions
}

# params for deleting a patient document in the db
input PatientDocumentDeleteInput {
  patientDocumentId: ID!
}

# params for generating a signed url for documents
input PatientDocumentSignedUrlCreateInput {
  patientId: ID!
  action: PatientSignedUrlAction!
  documentId: ID!
  contentType: String
}

# params for editing a patient need to know
input PatientNeedToKnowEditInput {
  patientInfoId: ID!
  text: String!
}

# params for editing a current user
input CurrentUserEditInput {
  locale: String
  phone: String
  firstName: String
  lastName: String
}

# params for creating a task
input TaskCreateInput {
  title: String!
  description: String
  dueAt: String
  patientId: ID!
  assignedToId: ID
  patientGoalId: ID!
  priority: Priority
  CBOReferralId: ID
}

# params for deleting a task
input TaskDeleteInput {
  taskId: ID!
}

# params for creating a task
input TaskEditInput {
  taskId: ID!
  title: String
  description: String
  dueAt: String
  assignedToId: ID
  priority: Priority
  patientGoalId: ID
}

# params for completing a task
input TaskCompleteInput {
  taskId: ID!
}

# params for adding user to a task's followers
input TaskFollowInput {
  userId: ID!
  taskId: ID!
}

# params for creating a task comment
input TaskCommentCreateInput {
  taskId: ID!
  body: String!
}

# params for editing a task comment
input TaskCommentEditInput {
  taskCommentId: ID!
  body: String!
}

# params for deleting a task comment
input TaskCommentDeleteInput {
  taskCommentId: ID!
}

# params for creating a risk area group
input RiskAreaGroupCreateInput {
  title: String!
  shortTitle: String!
  order: Int!
  mediumRiskThreshold: Int!
  highRiskThreshold: Int!
}

# params for editing a risk area group
input RiskAreaGroupEditInput {
  riskAreaGroupId: ID!
  title: String
  shortTitle: String
  order: Int
  mediumRiskThreshold: Int
  highRiskThreshold: Int
}

# params for deleting a risk area group
input RiskAreaGroupDeleteInput {
  riskAreaGroupId: ID!
}

input RiskAreaCreateInput {
  title: String!
  assessmentType: AssessmentType!
  riskAreaGroupId: ID!
  order: Int!
  mediumRiskThreshold: Int!
  highRiskThreshold: Int!
}

input RiskAreaEditInput {
  riskAreaId: ID!
  title: String
  order: Int
  mediumRiskThreshold: Int
  highRiskThreshold: Int
}

input RiskAreaDeleteInput {
  riskAreaId: ID!
}

input QuestionCreateInput {
  title: String!
  answerType: AnswerTypeOptions!
  validatedSource: String
  riskAreaId: ID
  screeningToolId: ID
  progressNoteTemplateId: ID
  order: Int!
  applicableIfType: QuestionConditionTypeOptions
  computedFieldId: ID
  hasOtherTextAnswer: Boolean
}

input QuestionEditInput {
  questionId: ID!
  title: String
  answerType: AnswerTypeOptions
  validatedSource: String
  order: Int
  applicableIfType: QuestionConditionTypeOptions
  hasOtherTextAnswer: Boolean
}

input QuestionDeleteInput {
  questionId: ID!
}

input AnswerCreateInput {
  displayValue: String!
  value: String!
  valueType: AnswerValueTypeOptions!
  riskAdjustmentType: RiskAdjustmentTypeOptions
  inSummary: Boolean
  summaryText: String
  questionId: ID!
  order: Int!
}

input AnswerEditInput {
  displayValue: String
  value: String
  valueType: AnswerValueTypeOptions
  riskAdjustmentType: RiskAdjustmentTypeOptions
  inSummary: Boolean
  summaryText: String
  order: Int
  answerId: ID!
}

input AnswerDeleteInput {
  answerId: ID!
}

input PatientAnswerInput {
  answerId: ID!
  answerValue: String!
  patientId: ID!
  applicable: Boolean!
  questionId: ID!
}

input PatientAnswersCreateInput {
  patientId: ID!
  patientAnswers: [PatientAnswerInput]!
  questionIds: [String]!
  patientScreeningToolSubmissionId: ID
  riskAreaAssessmentSubmissionId: ID
  progressNoteId: ID
}

input PatientAnswerEditInput {
  applicable: Boolean!
  patientAnswerId: ID!
}

input PatientAnswerDeleteInput {
  patientAnswerId: ID!
}

input QuestionConditionCreateInput {
  questionId: ID!
  answerId: ID!
}

# QuestionCondition edit input - for validation, need to edit question and answer at the same time
input QuestionConditionEditInput {
  questionConditionId: ID!
  questionId: ID!
  answerId: ID!
}

input QuestionConditionDeleteInput {
  questionConditionId: ID!
}

# EventNotification edit input
input EventNotificationEditInput {
  eventNotificationId: ID!
}

input UserTaskNotificationsEditInput {
  taskId: ID!
}

input ConcernCreateInput {
  title: String!
}

input ConcernEditInput {
  title: String!
  concernId: ID!
}

input ConcernDeleteInput {
  concernId: ID!
}

input ConcernAddDiagnosisCodeInput {
  concernId: ID!
  codesetName: String!
  code: String!
  version: String!
}

input ConcernRemoveDiagnosisCodeInput {
  concernId: ID!
  diagnosisCodeId: ID!
}

input ConcernSuggestInput {
  concernId: ID!
  answerId: ID
  screeningToolScoreRangeId: ID
}

input PatientConcernCreateInput {
  concernId: ID!
  patientId: ID!
  startedAt: String
  completedAt: String
}

input PatientConcernEditInput {
  order: Int
  concernId: ID
  patientId: ID
  startedAt: String
  completedAt: String
  patientConcernId: ID!
}

input PatientConcernBulkEditFields {
  id: ID!
  order: Int
  startedAt: String
  completedAt: String
}

input PatientConcernBulkEditInput {
  patientConcerns: [PatientConcernBulkEditFields]!
  patientId: ID!
}

input PatientConcernDeleteInput {
  patientConcernId: ID!
}

input GoalSuggestionTemplateCreateInput {
  title: String!
}

input GoalSuggestionTemplateEditInput {
  title: String!
  goalSuggestionTemplateId: ID!
}

input GoalSuggestionTemplateDeleteInput {
  goalSuggestionTemplateId: ID!
}

input GoalSuggestInput {
  answerId: ID
  screeningToolScoreRangeId: ID
  goalSuggestionTemplateId: ID!
}

input PatientGoalCreateInput {
  title: String
  patientId: ID!
  patientConcernId: ID
  goalSuggestionTemplateId: ID
  taskTemplateIds: [String]
  concernId: ID
  concernTitle: String
  startedAt: String
}

input PatientGoalEditInput {
  patientGoalId: ID!
  title: String!
  patientConcernId: ID!
}

input PatientGoalDeleteInput {
  patientGoalId: ID!
}

input TaskTemplateCreateInput {
  title: String!
  completedWithinNumber: Int
  completedWithinInterval: String
  repeating: Boolean
  goalSuggestionTemplateId: ID!
  priority: Priority
  careTeamAssigneeRole: String
  CBOCategoryId: ID
}

input TaskTemplateEditInput {
  title: String!
  completedWithinNumber: Int
  completedWithinInterval: String
  repeating: Boolean
  goalSuggestionTemplateId: ID
  priority: Priority
  careTeamAssigneeRole: String
  CBOCategoryId: ID
  taskTemplateId: ID!
}

input TaskTemplateDeleteInput {
  taskTemplateId: ID!
}

input TaskSuggestInput {
  answerId: ID!
  taskTemplateId: ID!
}

input CarePlanSuggestionAcceptInput {
  carePlanSuggestionId: ID!
  patientConcernId: ID
  concernId: ID
  startedAt: String
  taskTemplateIds: [String]
}

input CarePlanSuggestionDismissInput {
  carePlanSuggestionId: ID!
  dismissedReason: String!
}

input ScreeningToolCreateInput {
  title: String!
  riskAreaId: ID!
}

input ScreeningToolEditInput {
  screeningToolId: ID!
  title: String
  riskAreaId: ID
}

input ScreeningToolDeleteInput {
  screeningToolId: ID!
}

input ScreeningToolScoreRangeCreateInput {
  screeningToolId: ID!
  description: String!
  minimumScore: Int!
  maximumScore: Int!
  riskAdjustmentType: RiskAdjustmentTypeOptions!
}

input ScreeningToolScoreRangeEditInput {
  screeningToolScoreRangeId: ID!
  description: String
  screeningToolId: ID
  minimumScore: Int
  maximumScore: Int
  deletedAt: String
  riskAdjustmentType: RiskAdjustmentTypeOptions
}

input ScreeningToolScoreRangeDeleteInput {
  screeningToolScoreRangeId: ID!
}

input PatientScreeningToolSubmissionCreateInput {
  screeningToolId: ID!
  patientId: ID!
}

input PatientScreeningToolSubmissionScoreInput {
  patientScreeningToolSubmissionId: ID!
}

input RiskAreaAssessmentSubmissionCreateInput {
  riskAreaId: ID!
  patientId: ID!
}

input RiskAreaAssessmentSubmissionCompleteInput {
  riskAreaAssessmentSubmissionId: ID!
}

input ProgressNoteTemplateCreateInput {
  title: String!
}

input ProgressNoteTemplateDeleteInput {
  progressNoteTemplateId: ID!
}

input ProgressNoteTemplateEditInput {
  progressNoteTemplateId: ID!
  title: String!
}

input ProgressNoteCreateInput {
  patientId: ID!
}

input ProgressNoteCompleteInput {
  progressNoteId: ID!
}

input ProgressNoteEditInput {
  progressNoteId: ID!
  progressNoteTemplateId: ID
  startedAt: String
  location: String
  summary: String
  memberConcern: String
  supervisorId: ID
  needsSupervisorReview: Boolean
  worryScore: Int
}

input ProgressNoteAddSupervisorNotesInput {
  progressNoteId: ID!
  supervisorNotes: String!
}

input ProgressNoteCompleteSupervisorReviewInput {
  progressNoteId: ID!
}

input QuickCallCreateInput {
  patientId: ID! # Needed to lookup or create progressNoteId
  reason: String!
  summary: String!
  direction: QuickCallDirection!
  callRecipient: String!
  wasSuccessful: Boolean!
  startTime: String!
}

input ComputedFieldCreateInput {
  label: String!
  dataType: ComputedFieldDataTypes!
}

input ComputedFieldDeleteInput {
  computedFieldId: ID!
}

# params for creating a computed field flag
input ComputedFieldFlagCreateInput {
  patientAnswerId: ID!
  reason: String
}

# params for creating a patient list
input PatientListCreateInput {
  title: String!
  answerId: ID!
  order: Int!
}

# params for editing a patient list
input PatientListEditInput {
  patientListId: ID!
  title: String
  answerId: ID
  order: Int
}

# params for deleting a patient list
input PatientListDeleteInput {
  patientListId: ID!
}

# params for creating a CBO
input CBOCreateInput {
  name: String!
  categoryId: ID!
  address: String!
  city: String!
  state: String!
  zip: String!
  fax: String
  phone: String!
  url: String
}

# params for editing a CBO
input CBOEditInput {
  CBOId: ID!
  name: String
  categoryId: ID
  address: String
  city: String
  state: String
  zip: String
  fax: String
  phone: String
  url: String
}

# params for deleting a CBO
input CBODeleteInput {
  CBOId: ID!
}

# params for creating a CBO referral
input CBOReferralCreateInput {
  categoryId: ID!
  CBOId: ID
  name: String
  url: String
  diagnosis: String
}

# params for editing a CBO referral
input CBOReferralEditInput {
  CBOReferralId: ID!
  taskId: ID!
  categoryId: ID
  CBOId: ID
  name: String
  url: String
  diagnosis: String
  sentAt: String
  acknowledgedAt: String
}

input PatientDataFlagCreateInput {
  patientId: ID!
  fieldName: CoreIdentityOptions!
  suggestedValue: String
  notes: String
}

# params for creating a patient glass break
input PatientGlassBreakCreateInput {
  patientId: ID!
  reason: String!
  note: String
}

# params for creating a progress note glass break
input ProgressNoteGlassBreakCreateInput {
  progressNoteId: ID!
  reason: String!
  note: String
}

# params for creating a patient consent form
input PatientConsentFormCreateInput {
  patientId: ID!
  formId: ID!
  signedAt: String!
}

# params for deleting a patient consent form
input PatientConsentFormDeleteInput {
  patientConsentFormId: ID!
}

# params for creating a patient advanced directive form
input PatientAdvancedDirectiveFormCreateInput {
  patientId: ID!
  formId: ID!
  signedAt: String!
}

# params for deleting a patient advanced directive form
input PatientAdvancedDirectiveFormDeleteInput {
  patientAdvancedDirectiveFormId: ID!
}

# check patient id for permissioning generating JWT for PDF
input JwtForPdfCreateInput {
  patientId: ID!
}

# params for editing patinet scratch pad
input PatientScratchPadEditInput {
  patientScratchPadId: ID!
  body: String!
}

# generate signed url for patient photo
input PatientPhotoSignedUrlCreateInput {
  patientId: ID!
  action: PatientSignedUrlAction!
}

input SmsMessageCreateInput {
  patientId: ID!
  body: String!
}

# params for generating a signed url for voicemail
input UserVoicemailSignedUrlCreateInput {
  voicemailId: ID!
}

# params for getting Mattermost url to specific user
input MattermostUrlForUserInput {
  email: String!
}

# params for getting Mattermost url to patient channel
input MattermostUrlForPatientInput {
  patientId: ID!
}

type RootMutationType {
  # Create a new user
  userCreate(input: UserCreateInput): User
  # Login user
  userLogin(input: UserLoginInput): UserWithAuthToken
  # Edit user - role
  userEditRole(input: UserEditRoleInput): User
  # Edit user - permissions
  userEditPermissions(input: UserEditPermissionsInput): User
  # Delete user
  userDelete(input: UserDeleteInput): User
  # Edit current user
  currentUserEdit(input: CurrentUserEditInput): User
  # Create a new clinic
  clinicCreate(input: ClinicCreateInput): Clinic
  # Add user to careTeam
  careTeamAddUser(input: CareTeamInput): User
  # Reassign a user on a careTeam
  careTeamReassignUser(input: CareTeamReassignInput): User
  # Add multiple patients to careTeam
  careTeamAssignPatients(input: CareTeamAssignInput): UserWithCount
  # Make user team lead of careTeam
  careTeamMakeTeamLead(input: CareTeamMakeTeamLeadInput): User
  # Create an address
  addressCreate(input: AddressCreateInput): Address
  # Create an address for a Patient
  addressCreateForPatient(input: AddressCreateForPatientInput): Address
  # Delete an address for a Patient
  addressDeleteForPatient(input: AddressDeleteForPatientInput): Address
  # Edit an address
  addressEdit(input: AddressEditInput): Address
  # Create a phone number for a Patient
  phoneCreateForPatient(input: PhoneCreateForPatientInput): Phone
  # Create a phone number
  phoneCreate(input: PhoneCreateInput): Phone
  # Delete a phone number for a Patient
  phoneDeleteForPatient(input: PhoneDeleteForPatientInput): Phone
  # Create an email for a Patient
  emailCreateForPatient(input: EmailCreateForPatientInput): Email
  # Create an email
  emailCreate(input: EmailCreateInput): Email
  # Delete an email for a Patient
  emailDeleteForPatient(input: EmailDeleteForPatientInput): Email
  # Edit an email
  emailEdit(input: EmailEditInput): Email
  # mark core identity verified on patient stored in the db
  patientCoreIdentityVerify(input: PatientCoreIdentityVerifyInput): Patient
  # Edit fields on patient info stored in the db
  patientInfoEdit(input: PatientInfoEditInput): PatientInfo
  # Create patient contact
  patientContactCreate(input: PatientContactCreateInput): PatientContact
  # Delete patient contact
  patientContactDelete(input: PatientContactDeleteInput): PatientContact
  # Edit fields on patient contact stored in the db
  patientContactEdit(input: PatientContactEditInput): PatientContact
  # Create patient external provider
  patientExternalProviderCreate(input: PatientExternalProviderCreateInput): PatientExternalProvider
  # Delete patient external provider
  patientExternalProviderDelete(input: PatientExternalProviderDeleteInput): PatientExternalProvider
  # Edit fields on patient external provider stored in the db
  patientExternalProviderEdit(input: PatientExternalProviderEditInput): PatientExternalProvider
  # Create patient document
  patientDocumentCreate(input: PatientDocumentCreateInput): PatientDocument
  # Delete patient document
  patientDocumentDelete(input: PatientDocumentDeleteInput): PatientDocument
  # generate a signed URL for patient document
  patientDocumentSignedUrlCreate(input: PatientDocumentSignedUrlCreateInput): SignedUrl!
  # Edit a patient need to know
  patientNeedToKnowEdit(input: PatientNeedToKnowEditInput): PatientNeedToKnow
  # Create a task
  taskCreate(input: TaskCreateInput): Task
  # Delete a task
  taskDelete(input: TaskDeleteInput): Task
  # Edit a task
  taskEdit(input: TaskEditInput): Task
  # Complete a task
  taskComplete(input: TaskCompleteInput): Task
  # Uncomplete a task
  taskUncomplete(input: TaskCompleteInput): Task
  # Add user to task followers
  taskUserFollow(input: TaskFollowInput): Task
  # Remove user from task followers
  taskUserUnfollow(input: TaskFollowInput): Task
  # Create a task
  taskCommentCreate(input: TaskCommentCreateInput): TaskComment
  # Edit a task
  taskCommentEdit(input: TaskCommentEditInput): TaskComment
  # Delete a task
  taskCommentDelete(input: TaskCommentDeleteInput): TaskComment
  # Create a RiskAreaGroup
  riskAreaGroupCreate(input: RiskAreaGroupCreateInput): RiskAreaGroup
  # Edit a RiskAreaGroup
  riskAreaGroupEdit(input: RiskAreaGroupEditInput): RiskAreaGroup
  # Delete a RiskAreaGroup
  riskAreaGroupDelete(input: RiskAreaGroupDeleteInput): RiskAreaGroup
  # Create a RiskArea
  riskAreaCreate(input: RiskAreaCreateInput): RiskArea
  # Edit a RiskArea
  riskAreaEdit(input: RiskAreaEditInput): RiskArea
  # Deletes a RiskArea
  riskAreaDelete(input: RiskAreaDeleteInput): RiskArea
  # Create a Question
  questionCreate(input: QuestionCreateInput): Question
  # Edit a Question
  questionEdit(input: QuestionEditInput): Question
  # Delete a question
  questionDelete(input: QuestionDeleteInput): Question
  # Create an Answer
  answerCreate(input: AnswerCreateInput): Answer
  # Edit an Answer
  answerEdit(input: AnswerEditInput): Answer
  # Deletes an Answer
  answerDelete(input: AnswerDeleteInput): Answer
  # Create a patient answer
  patientAnswersCreate(input: PatientAnswersCreateInput): [PatientAnswer]
  # Edit a patient answer
  patientAnswerEdit(input: PatientAnswerEditInput): PatientAnswer
  # Deletes a patient Answer
  patientAnswerDelete(input: PatientAnswerDeleteInput): PatientAnswer
  # Create a QuestionCondition
  questionConditionCreate(input: QuestionConditionCreateInput): QuestionCondition
  # Edit a QuestionCondition
  questionConditionEdit(input: QuestionConditionEditInput): QuestionCondition
  # Deletes a QuestionCondition
  questionConditionDelete(input: QuestionConditionDeleteInput): QuestionCondition
  # Dismisses (marks as seen) an EventNotification
  eventNotificationDismiss(input: EventNotificationEditInput): EventNotification
  # Dismisses (marks as seen) all of the EventNotifications on a Task for a the current user
  eventNotificationsForTaskDismiss(input: UserTaskNotificationsEditInput): [EventNotification]
  # Create a concern
  concernCreate(input: ConcernCreateInput): Concern
  # Edit a concern
  concernEdit(input: ConcernEditInput): Concern
  # Deletes a concern
  concernDelete(input: ConcernDeleteInput): Concern
  # Add a diagnosis code to a concern
  concernAddDiagnosisCode(input: ConcernAddDiagnosisCodeInput): Concern
  # Remove a diagnosis code from a concern
  concernRemoveDiagnosisCode(input: ConcernRemoveDiagnosisCodeInput): Concern
  # suggest a concern for an answer
  concernSuggestionCreate(input: ConcernSuggestInput): [Concern]
  # delete suggestion a concern for an answer
  concernSuggestionDelete(input: ConcernSuggestInput): [Concern]
  # goal suggestion template create
  goalSuggestionTemplateCreate(input: GoalSuggestionTemplateCreateInput): GoalSuggestionTemplate
  # Edit a goal suggestion template
  goalSuggestionTemplateEdit(input: GoalSuggestionTemplateEditInput): GoalSuggestionTemplate
  # Deletes a goal suggestion template
  goalSuggestionTemplateDelete(input: GoalSuggestionTemplateDeleteInput): GoalSuggestionTemplate
  # Suggest a goal suggestion template for an answer
  goalSuggestionCreate(input: GoalSuggestInput): [GoalSuggestionTemplate]
  # unsuggest a goal suggestion template for an answer
  goalSuggestionDelete(input: GoalSuggestInput): [GoalSuggestionTemplate]
  # task template create
  taskTemplateCreate(input: TaskTemplateCreateInput): TaskTemplate
  # Edit a task template
  taskTemplateEdit(input: TaskTemplateEditInput): TaskTemplate
  # Deletes a task template
  taskTemplateDelete(input: TaskTemplateDeleteInput): TaskTemplate
  # Suggest a task template for an answer
  taskSuggestionCreate(input: TaskSuggestInput): [TaskTemplate]
  # unsuggest a task template for an answer
  taskSuggestionDelete(input: TaskSuggestInput): [TaskTemplate]
  # patient goal create
  patientGoalCreate(input: PatientGoalCreateInput): PatientGoal
  # patient goal edit
  patientGoalEdit(input: PatientGoalEditInput): PatientGoal
  # patient goal delete
  patientGoalDelete(input: PatientGoalDeleteInput): PatientGoal
  # patient concern create
  patientConcernCreate(input: PatientConcernCreateInput): PatientConcern
  # patient concern edit
  patientConcernEdit(input: PatientConcernEditInput): PatientConcern
  # patient concern bulk edit
  patientConcernBulkEdit(input: PatientConcernBulkEditInput): [PatientConcern]
  # patient concern delete
  patientConcernDelete(input: PatientConcernDeleteInput): PatientConcern
  # care plan suggestion accept
  carePlanSuggestionAccept(input: CarePlanSuggestionAcceptInput): CarePlanSuggestion
  # care plan suggestion dismiss
  carePlanSuggestionDismiss(input: CarePlanSuggestionDismissInput): CarePlanSuggestion
  # screening tool create
  screeningToolCreate(input: ScreeningToolCreateInput): ScreeningTool
  # screening tool edit
  screeningToolEdit(input: ScreeningToolEditInput): ScreeningTool
  # screening tool delete
  screeningToolDelete(input: ScreeningToolDeleteInput): ScreeningTool
  # screening tool score range create
  screeningToolScoreRangeCreate(input: ScreeningToolScoreRangeCreateInput): ScreeningToolScoreRange
  # screening tool score range edit
  screeningToolScoreRangeEdit(input: ScreeningToolScoreRangeEditInput): ScreeningToolScoreRange
  # screening tool score range delete
  screeningToolScoreRangeDelete(input: ScreeningToolScoreRangeDeleteInput): ScreeningToolScoreRange
  # patient screening tool submission create
  patientScreeningToolSubmissionCreate(
    input: PatientScreeningToolSubmissionCreateInput
  ): PatientScreeningToolSubmission
  # patient screening tool submission score
  patientScreeningToolSubmissionScore(
    input: PatientScreeningToolSubmissionScoreInput
  ): PatientScreeningToolSubmission
  # create a progress note template
  progressNoteTemplateCreate(input: ProgressNoteTemplateCreateInput): ProgressNoteTemplate
  # edits a progress note template
  progressNoteTemplateEdit(input: ProgressNoteTemplateEditInput): ProgressNoteTemplate
  # deletes a progress note template
  progressNoteTemplateDelete(input: ProgressNoteTemplateDeleteInput): ProgressNoteTemplate
  # creates a progress note
  progressNoteCreate(input: ProgressNoteCreateInput): ProgressNote
  # completes a progress note
  progressNoteComplete(input: ProgressNoteCompleteInput): ProgressNote
  # edits a progress note
  progressNoteEdit(input: ProgressNoteEditInput): ProgressNote
  # add or edit supervisor notes
  progressNoteAddSupervisorNotes(input: ProgressNoteAddSupervisorNotesInput): ProgressNote
  # closes out supervisor review
  progressNoteCompleteSupervisorReview(
    input: ProgressNoteCompleteSupervisorReviewInput
  ): ProgressNote
  # creates a quick call
  quickCallCreate(input: QuickCallCreateInput): QuickCall
  # Create a computed field
  computedFieldCreate(input: ComputedFieldCreateInput): ComputedField
  # Delete a computed field
  computedFieldDelete(input: ComputedFieldDeleteInput): ComputedField
  # risk area assessment submission create
  riskAreaAssessmentSubmissionCreate(
    input: RiskAreaAssessmentSubmissionCreateInput
  ): RiskAreaAssessmentSubmission
  # risk area assessment submission complete
  riskAreaAssessmentSubmissionComplete(
    input: RiskAreaAssessmentSubmissionCompleteInput
  ): RiskAreaAssessmentSubmission
  computedFieldFlagCreate(input: ComputedFieldFlagCreateInput): ComputedFieldFlag
  # Create a PatientList
  patientListCreate(input: PatientListCreateInput): PatientList
  # Edit a PatientList
  patientListEdit(input: PatientListEditInput): PatientList
  # Delete a PatientList
  patientListDelete(input: PatientListDeleteInput): PatientList
  # Create a CBO
  CBOCreate(input: CBOCreateInput): CBO
  # Edit a CBO
  CBOEdit(input: CBOEditInput): CBO
  # Delete a CBO
  CBODelete(input: CBODeleteInput): CBO
  # Create a CBO Referral
  CBOReferralCreate(input: CBOReferralCreateInput): CBOReferral
  # Edit a CBO Referral
  CBOReferralEdit(input: CBOReferralEditInput): CBOReferral
  # Jwt token to view a PDF
  JwtForPdfCreate(input: JwtForPdfCreateInput): JwtForPdf!
  # creates a patient data flag
  patientDataFlagCreate(input: PatientDataFlagCreateInput): PatientDataFlag
  # creates a patient glass break
  patientGlassBreakCreate(input: PatientGlassBreakCreateInput): PatientGlassBreak
  # creates a progress note glass break
  progressNoteGlassBreakCreate(input: ProgressNoteGlassBreakCreateInput): ProgressNoteGlassBreak
  # creates a patient consent form
  patientConsentFormCreate(input: PatientConsentFormCreateInput): PatientConsentForm
  # deletes a patient consent form
  patientConsentFormDelete(input: PatientConsentFormDeleteInput): PatientConsentForm
  # creates a patient advanced directive form
  patientAdvancedDirectiveFormCreate(
    input: PatientAdvancedDirectiveFormCreateInput
  ): PatientAdvancedDirectiveForm
  # deletes a patient advanced directive form
  patientAdvancedDirectiveFormDelete(
    input: PatientAdvancedDirectiveFormDeleteInput
  ): PatientAdvancedDirectiveForm
  # edits a patient scratch pad
  patientScratchPadEdit(input: PatientScratchPadEditInput): PatientScratchPad
  # generate a signed URL for patient photo
  patientPhotoSignedUrlCreate(input: PatientPhotoSignedUrlCreateInput): SignedUrl!
  # create a SMS message (returns node so fits into paginated results)
  smsMessageCreate(input: SmsMessageCreateInput): SmsMessageNode!
  # creates a calendar for a patient
  calendarCreateForPatient(input: CalendarCreateForPatientInput): PatientCalendar!
  # creates a calendar event for a patient
  calendarCreateEventForPatient(input: CalendarCreateEventForPatientInput): CalendarUrl!
  # creates a calendar event for current user
  calendarCreateEventForCurrentUser(input: CalendarCreateEventForCurrentUserInput): CalendarUrl!
  # creates a JWT to download VCF
  JwtForVcfCreate: JwtForVcf!
  # generate a signed URL for voicemail
  userVoicemailSignedUrlCreate(input: UserVoicemailSignedUrlCreateInput): SignedUrl!
  # mattermost url to DM user
  mattermostUrlForUserCreate(input: MattermostUrlForUserInput): MattermostUrl!
  # mattermost url for patient channel
  mattermostUrlForPatientCreate(input: MattermostUrlForPatientInput): MattermostUrl!
}

type RootQueryType {
  # All Users (admin only)
  users(pageNumber: Int, pageSize: Int, hasLoggedIn: Boolean, orderBy: UserOrderOptions): UserEdges!
  # List of all Users with care roles
  userSummaryList(userRoleFilters: [UserRole!]): [UserWithCount!]!
  # The current User
  currentUser: User
  # A single Patient
  patient(patientId: ID!): Patient!
  # Users on a care team
  patientCareTeam(patientId: ID!): [CareTeamUser!]!
  # Patient need to know
  patientNeedToKnow(patientInfoId: ID!): PatientNeedToKnow!
  # Patient search
  patientSearch(query: String!, pageNumber: Int!, pageSize: Int!): PatientTableRowEdges!
  # Patients filtered by options
  patientPanel(
    pageNumber: Int!
    pageSize: Int!
    filters: PatientFilterOptions!
    showAllPatients: Boolean
  ): PatientTableRowEdges!
  # Patient dashboard - tasks due and notifications
  patientsWithUrgentTasks(pageNumber: Int!, pageSize: Int!): PatientForDashboardEdges!
  # Patient dashboard - recent conversations
  patientsWithRecentConversations(pageNumber: Int!, pageSize: Int!): PatientForDashboardEdges!
  # Patient dashboard - new to user care team
  patientsNewToCareTeam(pageNumber: Int!, pageSize: Int!): PatientForDashboardEdges!
  # Patient dashboard - pending MAP suggestions
  patientsWithPendingSuggestions(pageNumber: Int!, pageSize: Int!): PatientForDashboardEdges!
  # Patient dashboard - lacking demographic information
  patientsWithMissingInfo(pageNumber: Int!, pageSize: Int!): PatientForDashboardEdges!
  # Patient dashboard - no recent engagement
  patientsWithNoRecentEngagement(pageNumber: Int!, pageSize: Int!): PatientForDashboardEdges!
  # Patient dashboard - out of date MAP
  patientsWithOutOfDateMAP(pageNumber: Int!, pageSize: Int!): PatientForDashboardEdges!
  # Patient dashboard - open CBO referrals
  patientsWithOpenCBOReferrals(pageNumber: Int!, pageSize: Int!): PatientForDashboardEdges!
  # Patient dashboard - assigned state
  patientsWithAssignedState(pageNumber: Int!, pageSize: Int!): PatientForDashboardEdges!
  # Patient dashboard - intake in progress
  patientsWithIntakeInProgress(pageNumber: Int!, pageSize: Int!): PatientForDashboardEdges!
  # Patient dashboard - computed list for answer
  patientsForComputedList(
    answerId: ID!
    pageNumber: Int!
    pageSize: Int!
  ): PatientForDashboardEdges!
  # Patient contacts for patient
  patientContacts(patientId: ID!): [PatientContact!]
  # Patient contact healthcare proxies
  patientContactHealthcareProxies(patientId: ID!): [PatientContact!]
  # Patient external providers for patient
  patientExternalProviders(patientId: ID!): [PatientExternalProvider!]
  # Patient documents for patient
  patientDocuments(patientId: ID!): [PatientDocument!]
  # A single clinic
  clinic(clinicId: ID!): Clinic!
  # Clinics
  clinics(pageNumber: Int, pageSize: Int): ClinicEdges!
  # Task
  task(taskId: ID!): Task!
  # Patient's Tasks
  tasksForPatient(
    patientId: ID!
    pageNumber: Int
    pageSize: Int
    orderBy: TaskOrderOptions
  ): TaskEdges!
  # Current user's Tasks
  tasksForCurrentUser(
    pageNumber: Int
    pageSize: Int
    orderBy: UserTaskOrderOptions
    isFollowingTasks: Boolean
  ): TaskWithImageEdges!
  # Tasks due soon for patient - in dashboard
  tasksDueSoonForPatient(patientId: ID!): [Task!]!
  # Tasks with notifications for patient - in dashboard
  tasksWithNotificationsForPatient(patientId: ID!): [Task!]!
  # Task IDs with notifications for current user - in care plan MAP and tasks panel
  taskIdsWithNotifications: [TaskId!]!
  # Tasks assigned to or followed by a user for a patient
  tasksForUserForPatient(userId: ID!, patientId: ID!): [Task!]!
  # List of task comments
  taskComments(pageNumber: Int, pageSize: Int, taskId: ID!): TaskCommentEdges!
  # Single task comment
  taskComment(taskCommentId: ID!): TaskComment!
  # RiskAreaGroup
  riskAreaGroup(riskAreaGroupId: ID!): RiskAreaGroup!
  # Risk Area Group with associated patient answers
  riskAreaGroupForPatient(
    riskAreaGroupId: ID!
    patientId: ID!
    glassBreakId: ID
  ): RiskAreaGroupForPatient!
  # RiskAreaGroups
  riskAreaGroups: [RiskAreaGroup!]!
  # RiskAreaGroupsForPatient
  riskAreaGroupsForPatient(patientId: ID!, glassBreakId: ID): [FullRiskAreaGroupForPatient!]!
  # RiskArea
  riskArea(riskAreaId: ID!): RiskArea!
  # RiskAreas
  riskAreas: [RiskArea]!
  # Question
  question(questionId: ID!): Question!
  # Questions for risk area, progress note template or screening tool
  questions(filterId: ID!, filterType: QuestionFilterType!): [Question!]!
  # Answer
  answer(answerId: ID!): Answer
  # Answers
  answersForQuestion(questionId: ID!): [Answer]!
  # PatientAnswer
  patientAnswer(patientAnswerId: ID!): PatientAnswer!
  # PatientAnswersForQuestion
  patientAnswers(filterId: ID!, filterType: AnswerFilterType!, patientId: ID!): [PatientAnswer!]!
  # PatientPreviousAnswersForQuestion
  patientPreviousAnswersForQuestion(questionId: ID!, patientId: ID!): [PatientAnswer]!
  # PatientRiskAreaSummary
  patientRiskAreaSummary(riskAreaId: ID!, patientId: ID!): RiskAreaSummary!
  # PatientRiskAreaRiskScore
  patientRiskAreaRiskScore(riskAreaId: ID!, patientId: ID!): RiskScore!
  # QuestionCondition
  questionCondition(questionConditionId: ID!): QuestionCondition!
  # Event notifications for a user
  eventNotificationsForCurrentUser(
    pageNumber: Int
    pageSize: Int
    taskEventNotificationsOnly: Boolean
  ): EventNotificationEdges!
  # Event notifications for a task
  eventNotificationsForTask(taskId: ID!, pageNumber: Int, pageSize: Int): EventNotificationEdges!
  # Event notifications for a user's task - on dashboard
  eventNotificationsForUserTask(taskId: ID!): [EventNotification!]!
  # Concern
  concern(concernId: ID!): Concern!
  # Concerns
  concerns(orderBy: ConcernOrderOptions): [Concern]!
  # Concerns for answer
  concernsForAnswer(answerId: ID!): [Concern]!
  # patient concern
  patientConcern(patientConcernId: ID!): PatientConcern!
  # patient concerns for patient
  patientConcerns(patientId: ID!): [PatientConcern]!
  # Patient goal
  patientGoal(patientGoalId: ID!): PatientGoal!
  # Patient goals for patient
  patientGoals(patientId: ID!): [PatientGoal]!
  # Goal suggestion templates
  goalSuggestionTemplate(goalSuggestionTemplateId: ID!): GoalSuggestionTemplate!
  # Goal suggestion templates
  goalSuggestionTemplates(orderBy: GoalSuggestionOrderOptions): [GoalSuggestionTemplate]!
  # Goal suggestion for template for answer
  goalSuggestionTemplatesForAnswer(answerId: ID!): [GoalSuggestionTemplate]!
  # Task template
  taskTemplate(taskTemplateId: ID!): TaskTemplate!
  # Task templates
  taskTemplates: [TaskTemplate]!
  # Task templates suggested for answer
  taskTemplatesForAnswer(answerId: ID!): [TaskTemplate]!
  # Care Plan Suggestions
  carePlanSuggestionsForPatient(patientId: ID!, glassBreakId: ID): [CarePlanSuggestion]!
  # Care Plan
  carePlanForPatient(patientId: ID!, glassBreakId: ID): CarePlan!
  # screening tool
  screeningTool(screeningToolId: ID!): ScreeningTool!
  # screening tools
  screeningTools: [ScreeningTool]!
  # screening tool score range
  screeningToolScoreRange(screeningToolScoreRangeId: ID!): ScreeningToolScoreRange!
  # screening tool score range for screening tool and score
  screeningToolScoreRangeForScoreAndScreeningTool(
    screeningToolId: ID!
    score: Int!
  ): ScreeningToolScoreRange
  # screening tool score ranges
  screeningToolScoreRanges: [ScreeningToolScoreRange]!
  # screening tool score ranges for screening tool
  screeningToolScoreRangesForScreeningTool(screeningToolId: ID!): [ScreeningToolScoreRange]!
  # patient screening tool submission
  patientScreeningToolSubmission(
    patientScreeningToolSubmissionId: ID!
  ): PatientScreeningToolSubmission!
  # latest patient sreening tool submission for a screening tool
  patientScreeningToolSubmissionForPatientAndScreeningTool(
    screeningToolId: ID!
    patientId: ID!
    scored: Boolean!
  ): PatientScreeningToolSubmission
  # patient screening tool submissions for patient and screening tool (optioanlly)
  patientScreeningToolSubmissionsForPatient(
    patientId: ID!
    screeningToolId: ID
    scored: Boolean!
  ): [PatientScreeningToolSubmission]!
  # patient screening tool submissions for patient 360 (history tab)
  patientScreeningToolSubmissionsFor360(
    patientId: ID!
    glassBreakId: ID
  ): [PatientScreeningToolSubmission!]!
  # patient screening tool submissions
  patientScreeningToolSubmissions: [PatientScreeningToolSubmission]!
  # progress note template
  progressNoteTemplate(progressNoteTemplateId: ID!): ProgressNoteTemplate!
  # progress note templates
  progressNoteTemplates: [ProgressNoteTemplate]!
  # progress note
  progressNote(progressNoteId: ID!, glassBreakId: ID): ProgressNote!
  # progress note ids for patient
  progressNoteIdsForPatient(
    patientId: ID!
    completed: Boolean!
    glassBreakId: ID
  ): [PatientProgressNoteId!]!
  # progress notes for current user
  progressNotesForCurrentUser(completed: Boolean!): [ProgressNote]!
  # progress notes for supervisor review
  progressNotesForSupervisorReview: [ProgressNote]!
  # progress note activities for progress note
  progressNoteActivityForProgressNote(progressNoteId: ID!): ProgressNoteActivity!
  # latest progress note for patient
  progressNoteLatestForPatient(patientId: ID!): ProgressNote
  # quick call
  quickCall(quickCallId: ID!): QuickCall!
  # quick calls for progress note
  quickCallsForProgressNote(progressNoteId: ID!): [QuickCall]!
  # computed field
  computedField(computedFieldId: ID!): ComputedField!
  # computed fields
  computedFields(orderBy: ComputedFieldOrderOptions): [ComputedField]!
  # computed fields schema
  computedFieldsSchema: ComputedFieldsSchema!
  # risk area assessment submission
  riskAreaAssessmentSubmission(riskAreaAssessmentSubmissionId: ID!): RiskAreaAssessmentSubmission!
  # latest risk area assessment submission for a screening tool
  riskAreaAssessmentSubmissionForPatient(
    riskAreaId: ID!
    patientId: ID!
    completed: Boolean!
  ): RiskAreaAssessmentSubmission
  # patient list
  patientList(patientListId: ID!): PatientList!
  # all patient lists
  patientLists: [PatientList!]!
  # all CBO categories
  CBOCategories: [CBOCategory!]!
  # CBO
  CBO(CBOId: ID!): CBO!
  # all CBOs
  CBOs: [CBO!]!
  # all CBOs for given category
  CBOsForCategory(categoryId: ID!): [CBO!]!
  # patient data flags for a patient
  patientDataFlagsForPatient(patientId: ID!): [PatientDataFlag!]!
  # patient glass breaks for user during current session
  patientGlassBreaksForUser: [PatientGlassBreak!]!
  # progress note glass breaks for a user during current session
  progressNoteGlassBreaksForUser: [ProgressNoteGlassBreak!]!
  # check if don't need to break glass for given patient
  patientGlassBreakCheck(patientId: ID!): PatientGlassBreakCheck!
  # check if don't need to break glass for given progress note
  progressNoteGlassBreakCheck(progressNoteId: ID!): ProgressNoteGlassBreakCheck!
  # computed patient status for a patient
  patientComputedPatientStatus(patientId: ID!): ComputedPatientStatus!
  # patient consent forms
  patientConsentFormsForPatient(patientId: ID!): [PatientConsentForm!]!
  # patient advanced directive forms
  patientAdvancedDirectiveFormsForPatient(patientId: ID!): [PatientAdvancedDirectiveForm!]!
  # get all emails for a patient
  patientEmails(patientId: ID!): [Email!]
  # get all addresses for a patient
  patientAddresses(patientId: ID!): [Address!]
  # get all phones for a patient
  patientPhones(patientId: ID!): [Phone!]
  # gets a patient scratch pad for given user and patient
  patientScratchPad(patientId: ID!, glassBreakId: ID): PatientScratchPad!
  # gets a patient problem list
  patientProblemList(patientId: ID!): [PatientDiagnosis!]!
  # gets patient medications
  patientMedications(patientId: ID!): [PatientMedication!]!
  # gets patient encounters (external to Commons)
  patientEncounters(patientId: ID!, glassBreakId: ID): [PatientEncounter!]!
  # gets a patients full social security number and records a log of the view by user
  patientSocialSecurity(patientId: ID!, glassBreakId: ID): PatientSocialSecurity!
  # Google calendar id and url for the current user
  calendarForCurrentUser: Calendar!
  # Google calendar id and url for a patient calendar
  calendarForPatient(patientId: ID!): PatientCalendar!
  # List of google calendar events for a patient
  calendarEventsForPatient(
    patientId: ID!
    timeMin: String!
    pageSize: Int!
    pageToken: String
  ): CalendarEventEdges!
  # List of google calendar events for the logged in user
  calendarEventsForCurrentUser(
    timeMin: String!
    pageSize: Int!
    pageToken: String
  ): CalendarEventEdges!
  # SMS messages for given user and patient
  smsMessages(patientId: ID!, pageNumber: Int!, pageSize: Int!): SmsMessageEdges!
  # latest SMS message between given user and patient
  smsMessageLatest(patientId: ID!): SmsMessage
}

type RootSubscriptionType {
  smsMessageCreated(patientId: ID!): SmsMessageNode!
}

schema {
  query: RootQueryType
  mutation: RootMutationType
  subscription: RootSubscriptionType
}
