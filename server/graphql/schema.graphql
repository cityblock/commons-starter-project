scalar Date
scalar DateTime
scalar Time

# An object with a Globally Unique ID
interface uniqueId {
  # The ID of the object.
  id: ID!
}

type Pokemon implements uniqueId {
  id: ID!
  pokemonNumber: Int!
  name: String!
  attack: Int!
  defense: Int!
  pokeType: String!
  moves: [String!]!
  imageUrl: String!
  item: [Item!]!
  createdAt: DateTime!
  updatedAt: DateTime!
  deletedAt: DateTime
}

type Item implements uniqueId {
  id: ID!
  pokemonId: ID!
  name: String!
  price: Int!
  happiness: Int!
  imageUrl: String!
  createdAt: DateTime!
  updatedAt: DateTime!
  deletedAt: DateTime
}

#MUTATION DATA INPUTS
input PokemonCreateInput {
  pokemonNumber: Int!
  name: String!
  attack: Int!
  defense: Int!
  pokeType: String!
  moves: [String!]!
  imageUrl: String!
}

input PokemonEditInput {
  pokemonId: String!
  name: String
  attack: Int
  defense: Int
  pokeType: String
  moves: [String!]
  imageUrl: String
}

input ItemCreateInput {
  name: String!
  price: Int!
  happiness: Int!
  imageUrl: String!
}

input ItemEditInput {
  pokemonId: String!
  name: String
  price: Int
  happiness: Int
  imageUrl: String
}

type RootMutationType {
  # CREATE A POKEMON
  pokemonCreate(input: PokemonCreateInput!): Pokemon
  # # DELETE POKEMON
  # pokemonDelete: Pokemon!
  # # EDIT POKEMON
  # pokemonEdit(input: PokemonEditInput!): Pokemon

  # CREATE AN ITEM
  # pokemonItem(input: ItemCreateInput!): Item
  # DELETE ITEM
  # itemDelete: Item!
  # EDIT ITEM
  # itemEdit(input: ItemEditInput!): Item
}

type RootQueryType {
  # GET A POKEMON & ITEMS
  pokemon(pokemonId: ID!): Pokemon
  # GET ALL POKEMONS
  pokemonGetAll: [Pokemon!]

  # GET ITEM
  item(itemId: ID!): Item
}

schema {
  query: RootQueryType
  mutation: RootMutationType
}
