scalar GraphQLEmail
scalar GraphQLPassword
scalar GraphQLDateTime

enum UserRole {
  physician
  nurseCareManager
  healthCoach
  familyMember
  anonymousUser
  admin
}

# User account model
type User implements uniqueId {
  id: ID!
  firstName: String
  lastName: String
  email: String
  userRole: UserRole
  createdAt: GraphQLDateTime!
  homeClinicId: String
}

# The user account with an optional auth token
type UserWithAuthToken {
  user: User!
  # The auth token to allow for quick login. JWT passed back in via headers for further requests
  authToken: String
}

# An object with a Globally Unique ID
interface uniqueId {
  # The ID of the object.
  id: ID!
}

# Patient contact
type Contact {
  email: String
  lastEmail: String
  emailExists: Boolean
  homePhone: String
  mobilePhone: String
  hasMobile: Boolean
  consentToCall: Boolean
  consentToText: Boolean
}

# Patient poverty level response
type PovertyLevel {
  povertyLevelIncomeDeclined: Boolean
  povertyLevelIncomeRangeDeclined: Boolean
  povertyLevelFamilySizeDeclined: Boolean
}

# Patient address
type Address {
  city: String
  address1: String
  countryCode: String
  countryCode3166: String
  state: String
  zip: String
}

# Patient employer
type Employer {
  id: String
  phone: String
  city: String
  state: String
  name: String
  address: String
  zip: String
}

# Patient Garantor Address (for payment)
type GarantorAddress {
  addressSameAsPatient: Boolean
  address1: String
  city: String
  zip: String
  state: String
  countryCode: String
  countryCode3166: String
}

# Patient Garantor (for payment)
type Garantor {
  firstName: String
  lastName: String
  suffix: String
  SSN: String
  DOB: String
  phone: String
  email: String
  relationshipToPatient: String
  employerId: String
  address: GarantorAddress
}

# Patient combining data in athena and our database
type Patient implements uniqueId {
  id: ID!
  athenaPatientId: Int!
  firstName: String
  lastName: String
  suffix: String
  preferredName: String
  raceName: String
  dob: String
  sex: String
  race: [String]
  ethnicityCode: String
  status: String
  ssn: String
  homebound: Boolean
  language6392code: String
  maritalStatus: String
  maritalStatusName: String
  patientPhoto: Boolean
  patientPhotoUrl: String
  contact: Contact
  guarantor: Garantor
  employer: Employer
  address: Address
  povertyLevel: PovertyLevel
  homeClinicId: String
}

type PatientCareTeam {
  users: [User]
}

# Clinic
type Clinic implements uniqueId {
  id: ID!
  name: String!
  departmentId: Int!
  createdAt: GraphQLDateTime!
  updatedAt: GraphQLDateTime!
}

# PatientMedicationHistoryEvent
type PatientMedicationHistoryEvent {
  date: String!
  event: String!
}

# PatientMedicationHistory
type PatientMedicationHistory {
  events: [PatientMedicationHistoryEvent]!
}

# PatientMedication
type PatientMedication {
  name: String!
  medicationId: Int!
  medicationEntryId: String!
  quantity: Int
  quantityUnit: String!
  refillsAllowed: Int
  renewable: Boolean!
  dosageInstructions: String
  stopReason: String
  source: String!
  status: String!
  historical: Boolean!
  lastUpdated: String!
  history: PatientMedicationHistory!
}

# PatientMedicationsDetails
type PatientMedicationsDetails {
  active: [PatientMedication]!
  inactive: [PatientMedication]!
}

# PatientMedications
type PatientMedications {
  medications: PatientMedicationsDetails!
}

#
# BEGIN INPUT FIELDS
#

# params for creating a user
input CreateUserInputType {
  email: GraphQLEmail!
  password: GraphQLPassword!
  homeClinicId: String!
}

# params for logging in a user
input LoginUserInputType {
  email: String!
  password: String!
}

# params for creating a clinic
input CreateClinicInputType {
  departmentId: Int!
  name: String!
}

# params for adding or removing patient from care team
input CareTeamInput {
  userId: String!
  patientId: String!
}

type RootMutationType {
  # Create a new user
  createUser(input: CreateUserInputType): UserWithAuthToken

  # Login user
  login(input: LoginUserInputType): UserWithAuthToken

  # Create a new clinic
  createClinic(input: CreateClinicInputType): Clinic

  # Add user to care careTeam
  addUserToCareTeam(input: CareTeamInput): [User]

  # Remove user from careTeam
  removeUserFromCareTeam(input: CareTeamInput): [User]
}

type RootQueryType {
  # A single User
  user(
    # The id of the User
    userId: String!
  ): User

  # The current User
  currentUser: User

  # A single Patient
  patient(
    patientId: String!
  ): Patient

  # Users on a care team
  patientCareTeam(
    patientId: String!
  ): [User]

  # A single clinic
  clinic(
    clinicId: String!
  ): Clinic

  # Patient medications
  patientMedications(
    patientId: String!
  ): PatientMedications
}

schema {
  query: RootQueryType
  mutation: RootMutationType
}
