enum UserRole {
  physician
  nurseCareManager
  primaryCarePhysician
  communityHealthPartner
  psychiatrist
  healthCoach
  familyMember
  anonymousUser
  admin
}

enum AppointmentStatus {
  cancelled
  future
  open
  checkedIn
  checkedOut
  chargeEntered
}

enum ConcernOrderOptions {
  createdAtDesc
  createdAtAsc
  titleDesc
  titleAsc
  updatedAtDesc
  updatedAtAsc
}

enum GoalSuggestionOrderOptions {
  createdAtDesc
  createdAtAsc
  titleDesc
  titleAsc
  updatedAtDesc
  updatedAtAsc
}

enum TaskOrderOptions {
  createdAtDesc
  createdAtAsc
  dueAtDesc
  dueAtAsc
  updatedAtDesc
  updatedAtAsc
}

enum UserOrderOptions {
  createdAtDesc
  createdAtAsc
  lastLoginAtDesc
  lastLoginAtAsc
  updatedAtDesc
  updatedAtAsc
  emailAsc
}

enum ComputedFieldOrderOptions {
  labelDesc
  labelAsc
  slugDesc
  slugAsc
}

enum AnswerValueTypeOptions {
  string
  boolean
  number
}

enum RiskAdjustmentTypeOptions {
  inactive
  increment
  forceHighRisk
}

enum AnswerTypeOptions {
  dropdown
  radio
  freetext
  multiselect
}

enum QuestionConditionTypeOptions {
  allTrue
  oneTrue
}

enum QuestionFilterType {
  progressNoteTemplate
  riskArea
  screeningTool
}

enum AnswerFilterType {
  question
  progressNote
  riskArea
  screeningTool
  patientScreeningToolSubmission
  riskAreaAssessmentSubmission
}

enum TaskEventTypes {
  create_task
  add_follower
  remove_follower
  complete_task
  uncomplete_task
  delete_task
  add_comment
  edit_comment
  delete_comment
  edit_priority
  edit_due_date
  edit_assignee
  edit_title
  edit_description
}

enum CarePlanUpdateEventTypes {
  create_patient_concern
  edit_patient_concern
  delete_patient_concern
  create_patient_goal
  edit_patient_goal
  delete_patient_goal
}

enum PatientAnswerEventTypes {
  create_patient_answer
}

enum CompletedWithinInterval {
  hour
  day
  week
  month
  year
}

enum Priority {
  low
  medium
  high
}

enum CarePlanSuggestionType {
  concern
  goal
}

enum QuickCallDirection {
  Inbound
  Outbound
}

enum ComputedFieldDataTypes {
  boolean
  string
  number
}

enum AssessmentType {
  automated
  manual
}

# User account model
type User implements uniqueId {
  id: ID!
  locale: String
  phone: String
  firstName: String
  lastName: String
  email: String
  userRole: UserRole!
  homeClinicId: ID!
  googleProfileImageUrl: String
  createdAt: String!
  updatedAt: String!
}

# The user account with an optional auth token
type UserWithAuthToken {
  user: User!
  # The auth token to allow for quick login. JWT passed back in via headers for further requests
  authToken: String
}

# User node
type UserNode {
  node: User
  cursor: String!
}

# User edges
type UserEdges {
  edges: [UserNode]
  pageInfo: PageInfo!
}

# An object with a Globally Unique ID
interface uniqueId {
  # The ID of the object.
  id: ID!
}

# Page info for paginated responses
type PageInfo {
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
}

# Patient combining data in athena and our database
type Patient implements uniqueId {
  id: ID!
  firstName: String
  middleName: String
  language: String
  lastName: String
  dateOfBirth: String
  gender: String
  zip: String
  homeClinicId: ID
  createdAt: String!
  scratchPad: String
  consentToCall: Boolean
  consentToText: Boolean
}

# Patient node
type PatientNode {
  node: Patient
  cursor: String!
}

# Patient edges
type PatientEdges {
  edges: [PatientNode!]!
  pageInfo: PageInfo!
}

# Patient search result
type PatientSearchResult implements uniqueId {
  id: ID!
  firstName: String!
  lastName: String!
  dateOfBirth: String
  gender: String
  userCareTeam: Boolean!
}

# Patient search result node
type PatientSearchResultNode {
  node: PatientSearchResult
  cursor: String!
}

# Patient search result edges
type PatientSearchResultEdges {
  edges: [PatientSearchResultNode!]!
  pageInfo: PageInfo!
  totalCount: Int!
}

# Patient dashboard item
type PatientForDashboard implements uniqueId {
  id: ID!
  firstName: String!
  lastName: String!
  dateOfBirth: String
  gender: String
}

# Patient dashboard item node
type PatientForDashboardNode {
  node: PatientForDashboard
  cursor: String!
}

# Patient dashboard item edges
type PatientForDashboardEdges {
  edges: [PatientForDashboardNode!]!
  pageInfo: PageInfo!
  totalCount: Int!
}

# Clinic node
type ClinicNode {
  node: Clinic!
  cursor: String!
}

# Clinic edges
type ClinicEdges {
  edges: [ClinicNode!]!
  pageInfo: PageInfo!
}

# Clinic
type Clinic implements uniqueId {
  id: ID!
  name: String!
  departmentId: Int!
  createdAt: String!
  updatedAt: String!
}

# PatientDiagnosis
type PatientDiagnosis {
  code: String!
  codeSystem: String!
  description: String!
}

# PatientEncounter
type PatientEncounter {
  encounterType: String!
  providerName: String!
  providerRole: String!
  location: String!
  diagnoses: [PatientDiagnosis!]!
  reasons: [String]!
  dateTime: String!
}

# Appointment
type Appointment {
  athenaAppointmentId: ID!
  dateTime: String!
  athenaDepartmentId: Int!
  status: AppointmentStatus!
  athenaPatientId: Int!
  duration: Int!
  appointmentTypeId: Int!
  appointmentType: String!
  athenaProviderId: Int!
  userId: ID!
  patientId: ID!
  clinicId: ID!
}

# Appointment End Result
type AppointmentEndResult {
  success: Boolean!
}

# Appointment Add Note Result
type AppointmentAddNoteResult {
  success: Boolean!
  appointmentNote: String!
}

# Patient Scratch Pad
type PatientScratchPad {
  text: String
}

# Task
type Task implements uniqueId {
  id: ID!
  title: String!
  description: String
  patient: Patient!
  patientId: ID!
  dueAt: String
  priority: Priority
  createdBy: User!
  createdAt: String!
  updatedAt: String!
  deletedAt: String
  completedBy: User
  completedAt: String
  assignedTo: User
  followers: [User!]!
  patientGoalId: ID!
  patientGoal: PatientGoal!
}

# Task node
type TaskNode {
  node: Task
  cursor: String!
}

# Task edges
type TaskEdges {
  edges: [TaskNode!]!
  pageInfo: PageInfo!
}

# Task comment
type TaskComment implements uniqueId {
  id: ID!
  body: String!
  user: User!
  taskId: ID!
  createdAt: String!
  updatedAt: String
}

# Task comment node
type TaskCommentNode {
  node: TaskComment
  cursor: String!
}

# Task comment edges
type TaskCommentEdges {
  edges: [TaskCommentNode!]!
  pageInfo: PageInfo!
}

# Answer
type Answer implements uniqueId {
  id: ID!
  createdAt: String!
  updatedAt: String!
  deletedAt: String
  displayValue: String!
  value: String!
  valueType: AnswerValueTypeOptions!
  riskAdjustmentType: RiskAdjustmentTypeOptions
  inSummary: Boolean
  summaryText: String
  questionId: ID!
  order: Int!
  concernSuggestions: [Concern!]
  goalSuggestions: [GoalSuggestionTemplate]
  riskArea: RiskArea
  screeningTool: ScreeningTool
  patientAnswers: [PatientAnswer!]
}

# PatientAnswer
type PatientAnswer implements uniqueId {
  id: ID!
  createdAt: String!
  updatedAt: String!
  deletedAt: String
  answerId: ID!
  answer: Answer!
  answerValue: String!
  patientId: ID!
  applicable: Boolean
  question: Question
  patientScreeningToolSubmissionId: ID
  patientScreeningToolSubmission: PatientScreeningToolSubmission
  riskAreaAssessmentSubmissionId: ID
  riskAreaAssessmentSubmission: RiskAreaAssessmentSubmission
}

# Question
type Question implements uniqueId {
  id: ID!
  createdAt: String!
  updatedAt: String!
  deletedAt: String
  title: String!
  validatedSource: String
  answers: [Answer!]
  answerType: AnswerTypeOptions!
  riskAreaId: ID
  screeningToolId: ID
  progressNoteTemplateId: ID
  applicableIfQuestionConditions: [QuestionCondition!]!
  applicableIfType: QuestionConditionTypeOptions
  order: Int!
  computedFieldId: ID
  computedField: ComputedField
  otherTextAnswerId: String
}

# QuestionCondition
type QuestionCondition implements uniqueId {
  id: ID!
  createdAt: String!
  updatedAt: String!
  deletedAt: String
  answerId: ID!
  questionId: ID!
}

# Risk Area Group
type RiskAreaGroup implements uniqueId {
  id: ID!
  createdAt: String!
  updatedAt: String!
  deletedAt: String
  title: String!
  shortTitle: String!
  order: Int!
  mediumRiskThreshold: Int!
  highRiskThreshold: Int!
  riskAreas: [RiskArea!]
}

type RiskAreaGroupForPatient implements uniqueId {
  id: ID!
  createdAt: String!
  updatedAt: String!
  deletedAt: String
  title: String!
  shortTitle: String!
  order: Int!
  mediumRiskThreshold: Int!
  highRiskThreshold: Int!
  riskAreas: [RiskAreaForPatient!]!
}

# Risk Area
type RiskArea implements uniqueId {
  id: ID!
  createdAt: String!
  updatedAt: String!
  deletedAt: String
  title: String!
  assessmentType: AssessmentType!
  riskAreaGroupId: ID!
  riskAreaGroup: RiskAreaGroup!
  order: Int!
  mediumRiskThreshold: Int!
  highRiskThreshold: Int!
  questions: [Question!]
  screeningTools: [ScreeningTool!]
}

type RiskAreaForPatient implements uniqueId {
  id: ID!
  createdAt: String!
  updatedAt: String!
  deletedAt: String
  title: String!
  assessmentType: AssessmentType!
  riskAreaGroupId: ID!
  riskAreaGroup: RiskAreaGroup!
  order: Int!
  mediumRiskThreshold: Int!
  highRiskThreshold: Int!
  questions: [Question!]!
  riskAreaAssessmentSubmissions: [RiskAreaAssessmentSubmission!]!
  screeningTools: [ScreeningToolForPatient!]!
}

type RiskScore {
  score: Int!
  forceHighRisk: Boolean!
}

type RiskAreaSummary {
  summary: [String!]!
  started: Boolean!
  lastUpdated: String
}

type RiskAreaStatistic {
  riskArea: RiskArea!
  summaryData: RiskAreaSummary!
  scoreData: RiskScore!
}

type ThreeSixtySummary {
  riskAreas: [RiskAreaStatistic!]!
}

# Task Event
type TaskEvent implements uniqueId {
  id: ID!
  taskId: ID!
  userId: ID!
  user: User!
  eventType: TaskEventTypes
  eventCommentId: ID
  eventComment: TaskComment
  eventUserId: ID
  eventUser: User
  progressNoteId: ID
  progressNote: ProgressNote
  createdAt: String!
  updatedAt: String!
  deletedAt: String
}

# Care Plan Update Event
type CarePlanUpdateEvent implements uniqueId {
  id: ID!
  patientId: ID!
  patient: Patient!
  userId: ID!
  user: User!
  patientConcernId: ID
  patientGoalId: ID
  patientConcern: PatientConcern
  patientGoal: PatientGoal
  eventType: CarePlanUpdateEventTypes!
  progressNoteId: ID
  progressNote: ProgressNote
  createdAt: String!
  updatedAt: String!
  deletedAt: String
}

# Patient Answer Event
type PatientAnswerEvent implements uniqueId {
  id: ID!
  patientId: ID!
  patient: Patient!
  userId: ID!
  user: User!
  patientAnswerId: ID!
  patientAnswer: PatientAnswer!
  previousPatientAnswerId: ID
  previousPatientAnswer: PatientAnswer
  eventType: PatientAnswerEventTypes!
  progressNoteId: ID
  progressNote: ProgressNote
  createdAt: String!
  updatedAt: String!
  deletedAt: String
}

# Event Notification
type EventNotification implements uniqueId {
  id: ID!
  title: String
  userId: ID!
  user: User!
  taskEventId: ID
  taskEvent: TaskEvent
  seenAt: String
  emailSentAt: String
  deliveredAt: String
  createdAt: String!
  updatedAt: String!
  deletedAt: String
}

# Event Notification node
type EventNotificationNode {
  node: EventNotification
  cursor: String!
}

# Event Notification edges
type EventNotificationEdges {
  edges: [EventNotificationNode!]!
  pageInfo: PageInfo!
}

# Concern
type Concern implements uniqueId {
  id: ID!
  title: String!
  createdAt: String!
  updatedAt: String!
  deletedAt: String
}

type PatientGoal implements uniqueId {
  id: ID!
  title: String!
  patientId: ID!
  patient: Patient!
  patientConcernId: ID
  patientConcern: PatientConcern
  goalSuggestionTemplateId: ID
  goalSuggestionTemplate: GoalSuggestionTemplate
  tasks: [Task!]!
  createdAt: String!
  updatedAt: String!
  deletedAt: String
}

type PatientConcern implements uniqueId {
  id: ID!
  order: Int!
  concernId: ID!
  concern: Concern!
  patientGoals: [PatientGoal!]
  patientId: ID!
  patient: Patient!
  startedAt: String
  completedAt: String
  createdAt: String!
  updatedAt: String!
  deletedAt: String
}

type GoalSuggestionTemplate implements uniqueId {
  id: ID!
  title: String!
  taskTemplates: [TaskTemplate!]!
  createdAt: String!
  updatedAt: String!
  deletedAt: String
}

type TaskTemplate implements uniqueId {
  id: ID!
  title: String!
  completedWithinNumber: Int
  completedWithinInterval: CompletedWithinInterval
  repeating: Boolean
  goalSuggestionTemplateId: ID!
  priority: Priority
  careTeamAssigneeRole: UserRole
  createdAt: String!
  updatedAt: String!
  deletedAt: String
}

type PatientTaskSuggestion implements uniqueId {
  id: ID!
  patientId: ID!
  patient: Patient!
  taskTemplateId: ID
  taskTemplate: TaskTemplate
  acceptedById: ID
  acceptedBy: User
  dismissedById: ID
  dismissedBy: User
  dismissedReason: String
  createdAt: String!
  updatedAt: String!
  dismissedAt: String
  acceptedAt: String
}

type CarePlanSuggestion implements uniqueId {
  id: ID!
  patientId: ID!
  patient: Patient!
  suggestionType: CarePlanSuggestionType!
  concernId: ID
  concern: Concern
  goalSuggestionTemplateId: ID
  goalSuggestionTemplate: GoalSuggestionTemplate
  acceptedById: ID
  acceptedBy: User
  dismissedById: ID
  dismissedBy: User
  dismissedReason: String
  createdAt: String!
  updatedAt: String!
  dismissedAt: String
  acceptedAt: String
  patientScreeningToolSubmissionId: ID
  patientScreeningToolSubmission: PatientScreeningToolSubmission
  riskAreaAssessmentSubmissionId: ID
  riskAreaAssessmentSubmission: RiskAreaAssessmentSubmission
}

type CarePlan {
  goals: [PatientGoal!]!
  concerns: [PatientConcern!]!
}

type ScreeningTool implements uniqueId {
  id: ID!
  title: String!
  riskAreaId: ID!
  riskArea: RiskArea!
  screeningToolScoreRanges: [ScreeningToolScoreRange!]!
  patientScreeningToolSubmissions: [PatientScreeningToolSubmission!]
  createdAt: String!
  updatedAt: String!
  deletedAt: String
}

type ScreeningToolForPatient implements uniqueId {
  id: ID!
  title: String!
  patientScreeningToolSubmissions: [PatientScreeningToolSubmission!]!
  createdAt: String!
  updatedAt: String!
  deletedAt: String
}

type ScreeningToolScoreRange implements uniqueId {
  id: ID!
  description: String!
  screeningToolId: ID!
  screeningTool: ScreeningTool!
  riskAdjustmentType: RiskAdjustmentTypeOptions!
  minimumScore: Int!
  maximumScore: Int!
  createdAt: String!
  updatedAt: String!
  deletedAt: String
  concernSuggestions: [Concern!]!
  goalSuggestions: [GoalSuggestionTemplate]
}

type ScreeningToolScoreRangeForPatientScreeningToolSubmission implements uniqueId {
  id: ID!
  description: String!
  riskAdjustmentType: RiskAdjustmentTypeOptions!
  createdAt: String!
  updatedAt: String!
  deletedAt: String
}

type PatientScreeningToolSubmission implements uniqueId {
  id: ID!
  screeningToolId: ID!
  screeningTool: ScreeningTool!
  patientId: ID!
  patient: Patient!
  userId: ID!
  user: User!
  score: Int
  riskArea: RiskArea!
  createdAt: String!
  updatedAt: String!
  deletedAt: String
  scoredAt: String
  carePlanSuggestions: [CarePlanSuggestion!]!
  screeningToolScoreRangeId: ID
  screeningToolScoreRange: ScreeningToolScoreRangeForPatientScreeningToolSubmission
}

type RiskAreaAssessmentSubmission implements uniqueId {
  id: ID!
  riskAreaId: ID!
  riskArea: RiskArea!
  patientId: ID!
  patient: Patient!
  userId: ID!
  user: User!
  createdAt: String!
  updatedAt: String!
  deletedAt: String
  completedAt: String
  carePlanSuggestions: [CarePlanSuggestion!]!
}

type ProgressNoteTemplate implements uniqueId {
  id: ID!
  title: String!
  createdAt: String!
  updatedAt: String!
  deletedAt: String
  carePlanSuggestions: [CarePlanSuggestion!]!
}

type ProgressNote implements uniqueId {
  id: ID!
  patientId: ID!
  patient: Patient!
  userId: ID!
  user: User!
  progressNoteTemplateId: ID
  progressNoteTemplate: ProgressNoteTemplate
  location: String
  summary: String
  memberConcern: String
  completedAt: String
  startedAt: String
  createdAt: String!
  updatedAt: String!
  deletedAt: String
  supervisorId: ID
  supervisor: User
  needsSupervisorReview: Boolean
  reviewedBySupervisorAt: String
  supervisorNotes: String
}

type QuickCall implements uniqueId {
  id: ID!
  progressNoteId: ID!
  progressNote: ProgressNote!
  userId: ID!
  user: User!
  reason: String!
  summary: String!
  direction: QuickCallDirection!
  callRecipient: String!
  wasSuccessful: Boolean!
  startTime: String!
  createdAt: String!
  updatedAt: String!
  deletedAt: String
}

type ProgressNoteActivity {
  taskEvents: [TaskEvent!]!
  patientAnswerEvents: [PatientAnswerEvent!]!
  carePlanUpdateEvents: [CarePlanUpdateEvent!]!
  quickCallEvents: [QuickCall!]!
}

type ComputedField implements uniqueId {
  id: ID!
  slug: String!
  label: String!
  dataType: ComputedFieldDataTypes!
  createdAt: String!
  updatedAt: String!
  deletedAt: String
}

type ComputedFieldSchema {
  slug: String!
  dataType: ComputedFieldDataTypes!
  values: [String!]!
}

type ComputedFieldsSchema {
  computedFields: [ComputedFieldSchema!]!
}

type ComputedFieldFlag {
  id: ID!
  patientAnswerId: ID!
  userId: ID!
  reason: String
}

#
# BEGIN INPUT FIELDS
#

# params for creating a user
input UserCreateInput {
  email: String!
  homeClinicId: ID!
}

# params for logging in a user
input UserLoginInput {
  googleAuthCode: String!
}

# params for editing a user - only supports user role
input UserEditRoleInput {
  userRole: String!
  email: String!
}

# params for deleting a user
input UserDeleteInput {
  email: String!
}

# params for creating a clinic
input ClinicCreateInput {
  departmentId: Int!
  name: String!
}

# params for adding or removing patient from care team
input CareTeamInput {
  userId: ID!
  patientId: ID!
}

# params for starting an appointment
input AppointmentStartInput {
  patientId: ID!
  appointmentTypeId: Int
}

# params for ending an appointment
input AppointmentEndInput {
  patientId: ID!
  appointmentId: ID!
  appointmentNote: String
}

# params for adding a note to an appointment
input AppointmentAddNoteInput {
  patientId: ID!
  appointmentId: ID!
  appointmentNote: String!
}

# params for editing a patient in the db
input PatientEditInput {
  patientId: ID!
  firstName: String
  middleName: String
  lastName: String
  dateOfBirth: String
  gender: String
  zip: String
  language: String
  consentToCall: Boolean
  consentToText: Boolean
}

# params for creating a patient in the db and in athena
input PatientSetupInput {
  firstName: String!
  middleName: String
  lastName: String!
  dateOfBirth: String!
  gender: String!
  zip: String!
  homeClinicId: ID!
  suffix: String
  preferredName: String
  race: String!
  ssn: String!
  language: String!
  maritalStatus: String!
  email: String
  homePhone: String
  mobilePhone: String
  consentToCall: Boolean!
  consentToText: Boolean!
  city: String
  address1: String
  county: String
  country: String
  state: String
  insuranceType: String
  patientRelationshipToPolicyHolder: String
  memberId: ID
  policyGroupNumber: String
  issueDate: String
  expirationDate: String
}

# params for editing a patient scratch pad
input PatientScratchPadEditInput {
  patientId: ID!
  text: String!
}

# params for editing a current user
input CurrentUserEditInput {
  locale: String
  phone: String
  firstName: String
  lastName: String
}

# params for creating a task
input TaskCreateInput {
  title: String!
  description: String
  dueAt: String
  patientId: ID!
  assignedToId: ID
  patientGoalId: ID
  priority: Priority
}

# params for deleting a task
input TaskDeleteInput {
  taskId: ID!
}

# params for creating a task
input TaskEditInput {
  taskId: ID!
  title: String
  description: String
  dueAt: String
  assignedToId: ID
  priority: Priority
  patientGoalId: ID
}

# params for completing a task
input TaskCompleteInput {
  taskId: ID!
}

# params for adding user to a task's followers
input TaskFollowInput {
  userId: ID!
  taskId: ID!
}

# params for creating a task comment
input TaskCommentCreateInput {
  taskId: ID!
  body: String!
}

# params for editing a task comment
input TaskCommentEditInput {
  taskCommentId: ID!
  body: String!
}

# params for deleting a task comment
input TaskCommentDeleteInput {
  taskCommentId: ID!
}

# params for creating a risk area group
input RiskAreaGroupCreateInput {
  title: String!
  shortTitle: String!
  order: Int!
  mediumRiskThreshold: Int!
  highRiskThreshold: Int!
}

# params for editing a risk area group
input RiskAreaGroupEditInput {
  riskAreaGroupId: ID!
  title: String
  shortTitle: String
  order: Int
  mediumRiskThreshold: Int
  highRiskThreshold: Int
}

# params for deleting a risk area group
input RiskAreaGroupDeleteInput {
  riskAreaGroupId: ID!
}

input RiskAreaCreateInput {
  title: String!
  assessmentType: AssessmentType!
  riskAreaGroupId: ID!
  order: Int!
  mediumRiskThreshold: Int!
  highRiskThreshold: Int!
}

input RiskAreaEditInput {
  riskAreaId: ID!
  title: String
  order: Int
  mediumRiskThreshold: Int
  highRiskThreshold: Int
}

input RiskAreaDeleteInput {
  riskAreaId: ID!
}

input QuestionCreateInput {
  title: String!
  answerType: AnswerTypeOptions!
  validatedSource: String
  riskAreaId: ID
  screeningToolId: ID
  progressNoteTemplateId: ID
  order: Int!
  applicableIfType: QuestionConditionTypeOptions
  computedFieldId: ID
  hasOtherTextAnswer: Boolean
}

input QuestionEditInput {
  questionId: ID!
  title: String
  answerType: AnswerTypeOptions
  validatedSource: String
  order: Int
  applicableIfType: QuestionConditionTypeOptions
  hasOtherTextAnswer: Boolean
}

input QuestionDeleteInput {
  questionId: ID!
}

input AnswerCreateInput {
  displayValue: String!
  value: String!
  valueType: AnswerValueTypeOptions!
  riskAdjustmentType: RiskAdjustmentTypeOptions
  inSummary: Boolean
  summaryText: String
  questionId: ID!
  order: Int!
}

input AnswerEditInput {
  displayValue: String
  value: String
  valueType: AnswerValueTypeOptions
  riskAdjustmentType: RiskAdjustmentTypeOptions
  inSummary: Boolean
  summaryText: String
  order: Int
  answerId: ID!
}

input AnswerDeleteInput {
  answerId: ID!
}

input PatientAnswerInput {
  answerId: ID!
  answerValue: String!
  patientId: ID!
  applicable: Boolean!
  questionId: ID!
}

input PatientAnswersCreateInput {
  patientId: ID!
  patientAnswers: [PatientAnswerInput]!
  questionIds: [String]!
  patientScreeningToolSubmissionId: ID
  riskAreaAssessmentSubmissionId: ID
  progressNoteId: ID
}

input PatientAnswerEditInput {
  applicable: Boolean!
  patientAnswerId: ID!
}

input PatientAnswerDeleteInput {
  patientAnswerId: ID!
}

input QuestionConditionCreateInput {
  questionId: ID!
  answerId: ID!
}

# QuestionCondition edit input - for validation, need to edit question and answer at the same time
input QuestionConditionEditInput {
  questionConditionId: ID!
  questionId: ID!
  answerId: ID!
}

input QuestionConditionDeleteInput {
  questionConditionId: ID!
}

# EventNotification edit input
input EventNotificationEditInput {
  eventNotificationId: ID!
}

input ConcernCreateInput {
  title: String!
}

input ConcernEditInput {
  title: String!
  concernId: ID!
}

input ConcernDeleteInput {
  concernId: ID!
}

input ConcernSuggestInput {
  concernId: ID!
  answerId: ID
  screeningToolScoreRangeId: ID
}

input PatientConcernCreateInput {
  concernId: ID!
  patientId: ID!
  startedAt: String
  completedAt: String
}

input PatientConcernEditInput {
  order: Int
  concernId: ID
  patientId: ID
  startedAt: String
  completedAt: String
  patientConcernId: ID!
}

input PatientConcernBulkEditFields {
  id: ID!
  order: Int
  startedAt: String
  completedAt: String
}

input PatientConcernBulkEditInput {
  patientConcerns: [PatientConcernBulkEditFields]!
  patientId: ID!
}

input PatientConcernDeleteInput {
  patientConcernId: ID!
}

input GoalSuggestionTemplateCreateInput {
  title: String!
}

input GoalSuggestionTemplateEditInput {
  title: String!
  goalSuggestionTemplateId: ID!
}

input GoalSuggestionTemplateDeleteInput {
  goalSuggestionTemplateId: ID!
}

input GoalSuggestInput {
  answerId: ID
  screeningToolScoreRangeId: ID
  goalSuggestionTemplateId: ID!
}

input PatientGoalCreateInput {
  title: String
  patientId: ID!
  patientConcernId: ID
  goalSuggestionTemplateId: ID
  taskTemplateIds: [String]
  concernId: ID
  concernTitle: String
  startedAt: String
}

input PatientGoalEditInput {
  patientGoalId: ID!
  title: String!
  patientConcernId: ID
  goalSuggestionTemplateId: ID
}

input PatientGoalDeleteInput {
  patientGoalId: ID!
}

input TaskTemplateCreateInput {
  title: String!
  completedWithinNumber: Int
  completedWithinInterval: String
  repeating: Boolean
  goalSuggestionTemplateId: ID!
  priority: Priority
  careTeamAssigneeRole: String
}

input TaskTemplateEditInput {
  title: String!
  completedWithinNumber: Int
  completedWithinInterval: String
  repeating: Boolean
  goalSuggestionTemplateId: ID
  priority: Priority
  careTeamAssigneeRole: String
  taskTemplateId: ID!
}

input TaskTemplateDeleteInput {
  taskTemplateId: ID!
}

input TaskSuggestInput {
  answerId: ID!
  taskTemplateId: ID!
}

input PatientTaskSuggestionAcceptInput {
  patientTaskSuggestionId: ID!
}

input PatientTaskSuggestionDismissInput {
  patientTaskSuggestionId: ID!
  dismissedReason: String!
}

input CarePlanSuggestionAcceptInput {
  carePlanSuggestionId: ID!
  patientConcernId: ID
  concernId: ID
  startedAt: String
  taskTemplateIds: [String]
}

input CarePlanSuggestionDismissInput {
  carePlanSuggestionId: ID!
  dismissedReason: String!
}

input ScreeningToolCreateInput {
  title: String!
  riskAreaId: ID!
}

input ScreeningToolEditInput {
  screeningToolId: ID!
  title: String
  riskAreaId: ID
}

input ScreeningToolDeleteInput {
  screeningToolId: ID!
}

input ScreeningToolScoreRangeCreateInput {
  screeningToolId: ID!
  description: String!
  minimumScore: Int!
  maximumScore: Int!
  riskAdjustmentType: RiskAdjustmentTypeOptions!
}

input ScreeningToolScoreRangeEditInput {
  screeningToolScoreRangeId: ID!
  description: String
  screeningToolId: ID
  minimumScore: Int
  maximumScore: Int
  deletedAt: String
  riskAdjustmentType: RiskAdjustmentTypeOptions
}

input ScreeningToolScoreRangeDeleteInput {
  screeningToolScoreRangeId: ID!
}

input PatientScreeningToolSubmissionCreateInput {
  screeningToolId: ID!
  patientId: ID!
}

input PatientScreeningToolSubmissionScoreInput {
  patientScreeningToolSubmissionId: ID!
}

input RiskAreaAssessmentSubmissionCreateInput {
  riskAreaId: ID!
  patientId: ID!
}

input RiskAreaAssessmentSubmissionCompleteInput {
  riskAreaAssessmentSubmissionId: ID!
}

input ProgressNoteTemplateCreateInput {
  title: String!
}

input ProgressNoteTemplateDeleteInput {
  progressNoteTemplateId: ID!
}

input ProgressNoteTemplateEditInput {
  progressNoteTemplateId: ID!
  title: String!
}

input ProgressNoteCreateInput {
  patientId: ID!
}

input ProgressNoteCompleteInput {
  progressNoteId: ID!
}

input ProgressNoteEditInput {
  progressNoteId: ID!
  progressNoteTemplateId: ID
  startedAt: String
  location: String
  summary: String
  memberConcern: String
  supervisorId: ID
  needsSupervisorReview: Boolean
}

input ProgressNoteAddSupervisorNotesInput {
  progressNoteId: ID!
  supervisorNotes: String!
}

input QuickCallCreateInput {
  patientId: ID! # Needed to lookup or create progressNoteId
  reason: String!
  summary: String!
  direction: QuickCallDirection!
  callRecipient: String!
  wasSuccessful: Boolean!
  startTime: String!
}

input ComputedFieldCreateInput {
  label: String!
  dataType: ComputedFieldDataTypes!
}

input ComputedFieldDeleteInput {
  computedFieldId: ID!
}

# params for creating a computed field flag
input ComputedFieldFlagCreateInput {
  patientAnswerId: ID!
  reason: String
}

type RootMutationType {
  # Create a new user
  userCreate(input: UserCreateInput): User
  # Login user
  userLogin(input: UserLoginInput): UserWithAuthToken
  # Edit user
  userEditRole(input: UserEditRoleInput): User
  # Delete user
  userDelete(input: UserDeleteInput): User
  # Edit current user
  currentUserEdit(input: CurrentUserEditInput): User
  # Create a new clinic
  clinicCreate(input: ClinicCreateInput): Clinic
  # Add user to careTeam
  careTeamAddUser(input: CareTeamInput): [User]
  # Remove user from careTeam
  careTeamRemoveUser(input: CareTeamInput): [User]
  # Add a note to an appointment
  appointmentAddNote(input: AppointmentAddNoteInput): AppointmentAddNoteResult
  # Start an appointment
  appointmentStart(input: AppointmentStartInput): Appointment
  # End an appointment
  appointmentEnd(input: AppointmentEndInput): AppointmentEndResult
  # Edit fields on patient stored in the db
  patientEdit(input: PatientEditInput): Patient
  # Setup patient creates the patient in the db AND in athena
  patientSetup(input: PatientSetupInput): Patient
  # Edit a patient scratch pad
  patientScratchPadEdit(input: PatientScratchPadEditInput): PatientScratchPad
  # Create a task
  taskCreate(input: TaskCreateInput): Task
  # Delete a task
  taskDelete(input: TaskDeleteInput): Task
  # Edit a task
  taskEdit(input: TaskEditInput): Task
  # Complete a task
  taskComplete(input: TaskCompleteInput): Task
  # Uncomplete a task
  taskUncomplete(input: TaskCompleteInput): Task
  # Add user to task followers
  taskUserFollow(input: TaskFollowInput): Task
  # Remove user from task followers
  taskUserUnfollow(input: TaskFollowInput): Task
  # Create a task
  taskCommentCreate(input: TaskCommentCreateInput): TaskComment
  # Edit a task
  taskCommentEdit(input: TaskCommentEditInput): TaskComment
  # Delete a task
  taskCommentDelete(input: TaskCommentDeleteInput): TaskComment
  # Create a RiskAreaGroup
  riskAreaGroupCreate(input: RiskAreaGroupCreateInput): RiskAreaGroup
  # Edit a RiskAreaGroup
  riskAreaGroupEdit(input: RiskAreaGroupEditInput): RiskAreaGroup
  # Delete a RiskAreaGroup
  riskAreaGroupDelete(input: RiskAreaGroupDeleteInput): RiskAreaGroup
  # Create a RiskArea
  riskAreaCreate(input: RiskAreaCreateInput): RiskArea
  # Edit a RiskArea
  riskAreaEdit(input: RiskAreaEditInput): RiskArea
  # Deletes a RiskArea
  riskAreaDelete(input: RiskAreaDeleteInput): RiskArea
  # Create a Question
  questionCreate(input: QuestionCreateInput): Question
  # Edit a Question
  questionEdit(input: QuestionEditInput): Question
  # Delete a question
  questionDelete(input: QuestionDeleteInput): Question
  # Create an Answer
  answerCreate(input: AnswerCreateInput): Answer
  # Edit an Answer
  answerEdit(input: AnswerEditInput): Answer
  # Deletes an Answer
  answerDelete(input: AnswerDeleteInput): Answer
  # Create a patient answer
  patientAnswersCreate(input: PatientAnswersCreateInput): [PatientAnswer]
  # Edit a patient answer
  patientAnswerEdit(input: PatientAnswerEditInput): PatientAnswer
  # Deletes a patient Answer
  patientAnswerDelete(input: PatientAnswerDeleteInput): PatientAnswer
  # Create a QuestionCondition
  questionConditionCreate(input: QuestionConditionCreateInput): QuestionCondition
  # Edit a QuestionCondition
  questionConditionEdit(input: QuestionConditionEditInput): QuestionCondition
  # Deletes a QuestionCondition
  questionConditionDelete(input: QuestionConditionDeleteInput): QuestionCondition
  # Dismisses (marks as seen) an EventNotification
  eventNotificationDismiss(input: EventNotificationEditInput): EventNotification
  # Create a concern
  concernCreate(input: ConcernCreateInput): Concern
  # Edit a concern
  concernEdit(input: ConcernEditInput): Concern
  # Deletes a concern
  concernDelete(input: ConcernDeleteInput): Concern
  # suggest a concern for an answer
  concernSuggestionCreate(input: ConcernSuggestInput): [Concern]
  # delete suggestion a concern for an answer
  concernSuggestionDelete(input: ConcernSuggestInput): [Concern]
  # goal suggestion template create
  goalSuggestionTemplateCreate(input: GoalSuggestionTemplateCreateInput): GoalSuggestionTemplate
  # Edit a goal suggestion template
  goalSuggestionTemplateEdit(input: GoalSuggestionTemplateEditInput): GoalSuggestionTemplate
  # Deletes a goal suggestion template
  goalSuggestionTemplateDelete(input: GoalSuggestionTemplateDeleteInput): GoalSuggestionTemplate
  # Suggest a goal suggestion template for an answer
  goalSuggestionCreate(input: GoalSuggestInput): [GoalSuggestionTemplate]
  # unsuggest a goal suggestion template for an answer
  goalSuggestionDelete(input: GoalSuggestInput): [GoalSuggestionTemplate]
  # task template create
  taskTemplateCreate(input: TaskTemplateCreateInput): TaskTemplate
  # Edit a task template
  taskTemplateEdit(input: TaskTemplateEditInput): TaskTemplate
  # Deletes a task template
  taskTemplateDelete(input: TaskTemplateDeleteInput): TaskTemplate
  # Suggest a task template for an answer
  taskSuggestionCreate(input: TaskSuggestInput): [TaskTemplate]
  # unsuggest a task template for an answer
  taskSuggestionDelete(input: TaskSuggestInput): [TaskTemplate]
  # patient task suggestion accept
  patientTaskSuggestionAccept(input: PatientTaskSuggestionAcceptInput): PatientTaskSuggestion
  # patient task suggestion dismiss
  patientTaskSuggestionDismiss(input: PatientTaskSuggestionDismissInput): PatientTaskSuggestion
  # patient goal create
  patientGoalCreate(input: PatientGoalCreateInput): PatientGoal
  # patient goal edit
  patientGoalEdit(input: PatientGoalEditInput): PatientGoal
  # patient goal delete
  patientGoalDelete(input: PatientGoalDeleteInput): PatientGoal
  # patient concern create
  patientConcernCreate(input: PatientConcernCreateInput): PatientConcern
  # patient concern edit
  patientConcernEdit(input: PatientConcernEditInput): PatientConcern
  # patient concern bulk edit
  patientConcernBulkEdit(input: PatientConcernBulkEditInput): [PatientConcern]
  # patient concern delete
  patientConcernDelete(input: PatientConcernDeleteInput): PatientConcern
  # care plan suggestion accept
  carePlanSuggestionAccept(input: CarePlanSuggestionAcceptInput): CarePlanSuggestion
  # care plan suggestion dismiss
  carePlanSuggestionDismiss(input: CarePlanSuggestionDismissInput): CarePlanSuggestion
  # screening tool create
  screeningToolCreate(input: ScreeningToolCreateInput): ScreeningTool
  # screening tool edit
  screeningToolEdit(input: ScreeningToolEditInput): ScreeningTool
  # screening tool delete
  screeningToolDelete(input: ScreeningToolDeleteInput): ScreeningTool
  # screening tool score range create
  screeningToolScoreRangeCreate(input: ScreeningToolScoreRangeCreateInput): ScreeningToolScoreRange
  # screening tool score range edit
  screeningToolScoreRangeEdit(input: ScreeningToolScoreRangeEditInput): ScreeningToolScoreRange
  # screening tool score range delete
  screeningToolScoreRangeDelete(input: ScreeningToolScoreRangeDeleteInput): ScreeningToolScoreRange
  # patient screening tool submission create
  patientScreeningToolSubmissionCreate(
    input: PatientScreeningToolSubmissionCreateInput
  ): PatientScreeningToolSubmission
  # patient screening tool submission score
  patientScreeningToolSubmissionScore(
    input: PatientScreeningToolSubmissionScoreInput
  ): PatientScreeningToolSubmission
  # create a progress note template
  progressNoteTemplateCreate(input: ProgressNoteTemplateCreateInput): ProgressNoteTemplate
  # edits a progress note template
  progressNoteTemplateEdit(input: ProgressNoteTemplateEditInput): ProgressNoteTemplate
  # deletes a progress note template
  progressNoteTemplateDelete(input: ProgressNoteTemplateDeleteInput): ProgressNoteTemplate
  # creates a progress note
  progressNoteCreate(input: ProgressNoteCreateInput): ProgressNote
  # completes a progress note
  progressNoteComplete(input: ProgressNoteCompleteInput): ProgressNote
  # edits a progress note
  progressNoteEdit(input: ProgressNoteEditInput): ProgressNote
  # edits a progress note
  progressNoteAddSupervisorNotes(input: ProgressNoteAddSupervisorNotesInput): ProgressNote
  # creates a quick call
  quickCallCreate(input: QuickCallCreateInput): QuickCall
  # Create a computed field
  computedFieldCreate(input: ComputedFieldCreateInput): ComputedField
  # Delete a computed field
  computedFieldDelete(input: ComputedFieldDeleteInput): ComputedField
  # risk area assessment submission create
  riskAreaAssessmentSubmissionCreate(
    input: RiskAreaAssessmentSubmissionCreateInput
  ): RiskAreaAssessmentSubmission
  # risk area assessment submission complete
  riskAreaAssessmentSubmissionComplete(
    input: RiskAreaAssessmentSubmissionCompleteInput
  ): RiskAreaAssessmentSubmission
  computedFieldFlagCreate(input: ComputedFieldFlagCreateInput): ComputedFieldFlag
}

type RootQueryType {
  # A single User
  user(userId: ID!): User
  # All Users (admin only)
  users(pageNumber: Int, pageSize: Int, hasLoggedIn: Boolean, orderBy: UserOrderOptions): UserEdges
  # List of patients the user is on the care team for (their 'patient panel')
  userPatientPanel(pageNumber: Int, pageSize: Int, userId: ID): PatientEdges
  # The current User
  currentUser: User
  # A single Patient
  patient(patientId: ID!): Patient
  # Users on a care team
  patientCareTeam(patientId: ID!): [User]
  # Patient scratch pad
  patientScratchPad(patientId: ID!): PatientScratchPad
  # Patient search
  patientSearch(query: String!, pageNumber: Int!, pageSize: Int!): PatientSearchResultEdges
  # Patient dashboard - tasks due and notifications
  patientsWithUrgentTasks(pageNumber: Int!, pageSize: Int!): PatientForDashboardEdges!
  # Patient dashboard - new to user care team
  patientsNewToCareTeam(pageNumber: Int!, pageSize: Int!): PatientForDashboardEdges!
  # Patient dashboard - pending MAP suggestions
  patientsWithPendingSuggestions(pageNumber: Int!, pageSize: Int!): PatientForDashboardEdges!
  # A single clinic
  clinic(clinicId: ID!): Clinic
  # Clinics
  clinics(pageNumber: Int, pageSize: Int): ClinicEdges
  # Patient encounters
  patientEncounters(patientId: ID!): [PatientEncounter]
  # Task
  task(taskId: ID!): Task
  # Patient's Tasks
  tasksForPatient(
    patientId: ID!
    pageNumber: Int
    pageSize: Int
    orderBy: TaskOrderOptions
  ): TaskEdges
  # Current user's Tasks
  tasksForCurrentUser(pageNumber: Int, pageSize: Int, orderBy: TaskOrderOptions): TaskEdges
  # Tasks due soon for patient - in dashboard
  tasksDueSoonForPatient(patientId: ID!): [Task!]!
  # Tasks with notifications for patient - in dashboard
  tasksWithNotificationsForPatient(patientId: ID!): [Task!]!
  # List of task comments
  taskComments(pageNumber: Int, pageSize: Int, taskId: ID!): TaskCommentEdges
  # Single task comment
  taskComment(taskCommentId: ID!): TaskComment
  # RiskAreaGroup
  riskAreaGroup(riskAreaGroupId: ID!): RiskAreaGroup
  # Risk Area Group with associated patient answers
  riskAreaGroupForPatient(riskAreaGroupId: ID!, patientId: ID!): RiskAreaGroupForPatient!
  # RiskAreaGroups
  riskAreaGroups: [RiskAreaGroup!]!
  # RiskArea
  riskArea(riskAreaId: ID!): RiskArea
  # RiskAreas
  riskAreas: [RiskArea]
  # Question
  question(questionId: ID!): Question
  # Questions for risk area, progress note template or screening tool
  questions(filterId: ID!, filterType: QuestionFilterType!): [Question!]!
  # Answer
  answer(answerId: ID!): Answer
  # Answers
  answersForQuestion(questionId: ID!): [Answer]!
  # PatientAnswer
  patientAnswer(patientAnswerId: ID!): PatientAnswer
  # PatientAnswersForQuestion
  patientAnswers(filterId: ID!, filterType: AnswerFilterType!, patientId: ID!): [PatientAnswer!]
  # PatientPreviousAnswersForQuestion
  patientPreviousAnswersForQuestion(questionId: ID!, patientId: ID!): [PatientAnswer]
  # PatientRiskAreaSummary
  patientRiskAreaSummary(riskAreaId: ID!, patientId: ID!): RiskAreaSummary
  # PatientRiskAreaRiskScore
  patientRiskAreaRiskScore(riskAreaId: ID!, patientId: ID!): RiskScore
  # QuestionCondition
  questionCondition(questionConditionId: ID!): QuestionCondition
  # Event notifications for a user
  eventNotificationsForCurrentUser(
    pageNumber: Int
    pageSize: Int
    taskEventNotificationsOnly: Boolean
  ): EventNotificationEdges
  # Event notifications for a task
  eventNotificationsForTask(taskId: ID!, pageNumber: Int, pageSize: Int): EventNotificationEdges
  # Event notifications for a user's task - on dashboard
  eventNotificationsForUserTask(taskId: ID!): [EventNotification!]!
  # Concern
  concern(concernId: ID!): Concern
  # Concerns
  concerns(orderBy: ConcernOrderOptions): [Concern]
  # Concerns for answer
  concernsForAnswer(answerId: ID!): [Concern]
  # patient concern
  patientConcern(patientConcernId: ID!): PatientConcern
  # patient concerns for patient
  patientConcerns(patientId: ID!): [PatientConcern]
  # Patient goal
  patientGoal(patientGoalId: ID!): PatientGoal
  # Patient goals for patient
  patientGoals(patientId: ID!): [PatientGoal]
  # Goal suggestion templates
  goalSuggestionTemplate(goalSuggestionTemplateId: ID!): GoalSuggestionTemplate
  # Goal suggestion templates
  goalSuggestionTemplates(orderBy: GoalSuggestionOrderOptions): [GoalSuggestionTemplate]
  # Goal suggestion for template for answer
  goalSuggestionTemplatesForAnswer(answerId: ID!): [GoalSuggestionTemplate]
  # Task template
  taskTemplate(taskTemplateId: ID!): TaskTemplate
  # Task templates
  taskTemplates: [TaskTemplate]
  # Task templates suggested for answer
  taskTemplatesForAnswer(answerId: ID!): [TaskTemplate]
  # patient task suggestions
  patientTaskSuggestions(patientId: ID!): [PatientTaskSuggestion]
  # Care Plan Suggestions
  carePlanSuggestionsForPatient(patientId: ID!): [CarePlanSuggestion]
  # Care Plan
  carePlanForPatient(patientId: ID!): CarePlan
  # screening tool
  screeningTool(screeningToolId: ID!): ScreeningTool
  # screening tools
  screeningTools: [ScreeningTool]
  # screening tools for risk area
  screeningToolsForRiskArea(riskAreaId: ID!): [ScreeningTool]
  # screening tool score range
  screeningToolScoreRange(screeningToolScoreRangeId: ID!): ScreeningToolScoreRange
  # screening tool score range for screening tool and score
  screeningToolScoreRangeForScoreAndScreeningTool(
    screeningToolId: ID!
    score: Int!
  ): ScreeningToolScoreRange
  # screening tool score ranges
  screeningToolScoreRanges: [ScreeningToolScoreRange]
  # screening tool score ranges for screening tool
  screeningToolScoreRangesForScreeningTool(screeningToolId: ID!): [ScreeningToolScoreRange]
  # patient screening tool submission
  patientScreeningToolSubmission(
    patientScreeningToolSubmissionId: ID!
  ): PatientScreeningToolSubmission
  # latest patient sreening tool submission for a screening tool
  patientScreeningToolSubmissionForPatientAndScreeningTool(
    screeningToolId: ID!
    patientId: ID!
    scored: Boolean!
  ): PatientScreeningToolSubmission
  # patient screening tool submissions for patient and screening tool (optioanlly)
  patientScreeningToolSubmissionsForPatient(
    patientId: ID!
    screeningToolId: ID
    scored: Boolean!
  ): [PatientScreeningToolSubmission]
  # patient screening tool submissions for patient 360 (history tab)
  patientScreeningToolSubmissionsFor360(patientId: ID!): [PatientScreeningToolSubmission!]
  # patient screening tool submissions
  patientScreeningToolSubmissions: [PatientScreeningToolSubmission]
  # progress note template
  progressNoteTemplate(progressNoteTemplateId: ID!): ProgressNoteTemplate
  # progress note templates
  progressNoteTemplates: [ProgressNoteTemplate]
  # progress note
  progressNote(progressNoteId: ID!): ProgressNote
  # progress notes for patient
  progressNotesForPatient(patientId: ID!, completed: Boolean!): [ProgressNote]
  # progress notes for current user
  progressNotesForCurrentUser(completed: Boolean!): [ProgressNote]
  # progress notes for supervisor review
  progressNotesForSupervisorReview: [ProgressNote]
  # progress note activities for progress note
  progressNoteActivityForProgressNote(progressNoteId: ID!): ProgressNoteActivity
  # quick call
  quickCall(quickCallId: ID!): QuickCall
  # quick calls for progress note
  quickCallsForProgressNote(progressNoteId: ID!): [QuickCall]
  # computed field
  computedField(computedFieldId: ID!): ComputedField
  # computed fields
  computedFields(orderBy: ComputedFieldOrderOptions): [ComputedField]
  # computed fields schema
  computedFieldsSchema: ComputedFieldsSchema
  # risk area assessment submission
  riskAreaAssessmentSubmission(riskAreaAssessmentSubmissionId: ID!): RiskAreaAssessmentSubmission
  # latest risk area assessment submission for a screening tool
  riskAreaAssessmentSubmissionForPatient(
    riskAreaId: ID!
    patientId: ID!
    completed: Boolean!
  ): RiskAreaAssessmentSubmission
}

schema {
  query: RootQueryType
  mutation: RootMutationType
}
