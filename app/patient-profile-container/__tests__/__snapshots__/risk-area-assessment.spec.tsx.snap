// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`method tests renders questions with correct visibility 1`] = `
Array [
  <PatientQuestion
    answerData={undefined}
    displayHamburger={true}
    editable={false}
    onChange={[Function]}
    question={
      Object {
        "answerType": "radio",
        "answers": Array [
          Object {
            "concernSuggestions": Array [],
            "createdAt": "Thu Jul 13 2017 16:52:56 GMT-0400 (EDT)",
            "deletedAt": null,
            "displayValue": "answer value",
            "goalSuggestions": Array [],
            "id": "answer-id",
            "inSummary": true,
            "order": 1,
            "questionId": "cool-task-id",
            "riskAdjustmentType": "increment",
            "riskArea": null,
            "screeningTool": null,
            "summaryText": "summary text",
            "updatedAt": "Thu Jul 13 2017 16:52:56 GMT-0400 (EDT)",
            "value": "true",
            "valueType": "boolean",
          },
        ],
        "applicableIfQuestionConditions": Array [
          Object {
            "answerId": "answer-id",
            "id": "question-condition",
            "questionId": "cool-question-id",
          },
        ],
        "applicableIfType": "allTrue",
        "createdAt": "Thu Jul 13 2017 16:52:56 GMT-0400 (EDT)",
        "deletedAt": null,
        "dueAt": "Thu Jul 13 2017 16:52:56 GMT-0400 (EDT)",
        "id": "cool-question-id",
        "order": 1,
        "riskAreaId": "risk-area-id",
        "screeningToolId": null,
        "title": "Question Title",
        "updatedAt": "Thu Jul 13 2017 16:52:56 GMT-0400 (EDT)",
        "validatedSource": "validated source",
      }
    }
    visible={false}
  />,
  <PatientQuestion
    answerData={
      Object {
        "answers": Array [],
        "changed": false,
        "oldAnswers": Array [],
      }
    }
    displayHamburger={true}
    editable={false}
    onChange={[Function]}
    question={
      Object {
        "answerType": "radio",
        "answers": Array [
          Object {
            "concernSuggestions": Array [],
            "displayValue": "answer-1",
            "goalSuggestions": Array [],
            "id": "question-2-answer-1",
            "inSummary": false,
            "order": 1,
            "questionId": "question-2",
            "riskAdjustmentType": "increment",
            "riskArea": null,
            "screeningTool": null,
            "summaryText": "None",
            "value": "answer-1",
            "valueType": "text",
          },
        ],
        "applicableIfQuestionConditions": Array [
          Object {
            "answerId": "answer-1",
            "id": "condition-1",
            "questionId": "question-1",
          },
        ],
        "applicableIfType": "allTrue",
        "createdAt": "2017-08-16T19:27:36.378Z",
        "deletedAt": null,
        "id": "question-2",
        "order": 2,
        "riskAreaId": "risk-area-id",
        "screeningToolId": null,
        "title": "Question 2",
        "validatedSource": null,
      }
    }
    visible={false}
  />,
]
`;

exports[`renders a risk area assessment 1`] = `
<div>
  <div
    className="sortSearchBar buttonBar"
  >
    <div
      className="invertedButton cancelButton hidden"
      onClick={[Function]}
    >
      Cancel
    </div>
    <div
      className="invertedButton toolsButton"
      onClick={[Function]}
    >
      Administer tool
    </div>
    <div
      className="button saveButton hidden disabled"
      onClick={[Function]}
    >
      Save updates
    </div>
    <div
      className="button startButton disabled"
      onClick={[Function]}
    >
      Start assessment
    </div>
  </div>
  <div
    className="riskAreasPanel"
  >
    <div
      className="riskAssessment"
    >
      <div
        className="riskAssessmentTitle mediumRisk"
      >
        <div
          className="title"
        >
          <div
            className="titleIcon"
          />
          <div
            className="titleText"
          >
            Loading...
          </div>
        </div>
        <div
          className="meta"
        >
          <div
            className="lastUpdatedLabel"
          >
            Last updated:
          </div>
          <div
            className="lastUpdatedValue"
          >
            Loading...
          </div>
        </div>
      </div>
    </div>
  </div>
</div>
`;
