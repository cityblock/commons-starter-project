scalar GraphQLEmail
scalar GraphQLDateTime

enum UserRole {
  physician
  nurseCareManager
  healthCoach
  familyMember
  anonymousUser
  admin
}

enum AppointmentStatus {
  cancelled
  future
  open
  checkedIn
  checkedOut
  chargeEntered
}

# User account model
type User implements uniqueId {
  id: ID!
  firstName: String
  lastName: String
  email: String
  userRole: UserRole!
  createdAt: GraphQLDateTime!
  homeClinicId: String!
  googleProfileImageUrl: String
}

# The user account with an optional auth token
type UserWithAuthToken {
  user: User!
  # The auth token to allow for quick login. JWT passed back in via headers for further requests
  authToken: String
}

# User node
type UserNode {
  node: User
  cursor: String!
}

# User edges
type UserEdges {
  edges: [UserNode]
  pageInfo: PageInfo!
}

# An object with a Globally Unique ID
interface uniqueId {
  # The ID of the object.
  id: ID!
}

# Page info for paginated responses
type PageInfo {
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
}

# Patient contact
type Contact {
  email: String
  lastEmail: String
  emailExists: Boolean
  homePhone: String
  mobilePhone: String
  hasMobile: Boolean
  consentToCall: Boolean
  consentToText: Boolean
}

# Patient poverty level response
type PovertyLevel {
  povertyLevelIncomeDeclined: Boolean
  povertyLevelIncomeRangeDeclined: Boolean
  povertyLevelFamilySizeDeclined: Boolean
}

# Patient address
type Address {
  city: String
  address1: String
  countryCode: String
  countryCode3166: String
  state: String
  zip: String
}

# Patient employer
type Employer {
  id: String
  phone: String
  city: String
  state: String
  name: String
  address: String
  zip: String
}

# Patient Garantor Address (for payment)
type GarantorAddress {
  addressSameAsPatient: Boolean
  address1: String
  city: String
  zip: String
  state: String
  countryCode: String
  countryCode3166: String
}

# Patient Garantor (for payment)
type Garantor {
  firstName: String
  lastName: String
  suffix: String
  SSN: String
  dateOfBirth: String
  phone: String
  email: String
  relationshipToPatient: String
  employerId: String
  address: GarantorAddress
}

# Patient combining data in athena and our database
type Patient implements uniqueId {
  id: ID!
  firstName: String
  lastName: String
  dateOfBirth: String
  gender: String
  zip: Int
  homeClinicId: String
  createdAt: String
}

# Patient Athena health record
type PatientHealthRecord {
  id: ID!
  firstName: String
  lastName: String
  dateOfBirth: String
  gender: String
  suffix: String
  preferredName: String
  raceName: String
  race: [String]
  ethnicityCode: String
  status: String
  ssn: String
  homebound: Boolean
  language6392code: String
  maritalStatus: String
  maritalStatusName: String
  patientPhoto: Boolean
  patientPhotoUrl: String
  contact: Contact
  guarantor: Garantor
  employer: Employer
  address: Address
  povertyLevel: PovertyLevel
}

# Patient node
type PatientNode {
  node: Patient
  cursor: String!
}

# Patient edges
type PatientEdges {
  edges: [PatientNode]
  pageInfo: PageInfo!
}

# Patient node
type PatientNode {
  node: Patient
  cursor: String!
}

# Patient edges
type PatientEdges {
  edges: [PatientNode]
  pageInfo: PageInfo!
}

# Clinic
type Clinic implements uniqueId {
  id: ID!
  name: String!
  departmentId: Int!
  createdAt: GraphQLDateTime!
  updatedAt: GraphQLDateTime!
}

# PatientMedicationHistoryEvent
type PatientMedicationHistoryEvent {
  date: String!
  event: String!
}

# PatientMedicationHistory
type PatientMedicationHistory {
  events: [PatientMedicationHistoryEvent]!
}

# PatientMedication
type PatientMedication {
  name: String!
  medicationId: Int!
  medicationEntryId: String!
  quantity: Int
  quantityUnit: String!
  refillsAllowed: Int
  renewable: Boolean!
  dosageInstructions: String
  stopReason: String
  source: String!
  status: String!
  historical: Boolean!
  lastUpdated: String!
  history: PatientMedicationHistory!
}

# PatientMedicationsDetails
type PatientMedicationsDetails {
  active: [PatientMedication]!
  inactive: [PatientMedication]!
}

# PatientMedications
type PatientMedications {
  medications: PatientMedicationsDetails!
}

# PatientDiagnosis
type PatientDiagnosis {
  diagnosisId: Int!
  icdCodes: [String]!
  snomedCode: Int!
  description: String!
}

# PatientEncounter
type PatientEncounter {
  encounterType: String!
  encounterId: Int!
  status: String!
  patientStatusId: Int
  appointmentId: Int!
  stage: String
  patientLocationId: Int
  providerId: Int
  encounterDate: String!
  encounterVisitName: String!
  patientLocation: String
  diagnoses: [PatientDiagnosis]
  patientStatus: String
  providerPhone: String
  providerFirstName: String
  providerLastName: String
  lastUpdated: String!
}

# PatientEncounter node
type PatientEncounterNode {
  node: PatientEncounter
  cursor: String!
}

# PatientEnounterEdges
type PatientEncounterEdges {
  edges: [PatientEncounterNode]
  pageInfo: PageInfo!
}

# Appointment
type Appointment {
  athenaAppointmentId: String!
  dateTime: String!
  athenaDepartmentId: Int!
  status: AppointmentStatus!
  athenaPatientId: Int!
  duration: Int!
  appointmentTypeId: Int!
  appointmentType: String!
  athenaProviderId: Int!
  userId: String!
  patientId: String!
  clinicId: String!
}

# Appointment End Result
type AppointmentEndResult {
  success: Boolean!
}

# Appointment Add Note Result
type AppointmentAddNoteResult {
  success: Boolean!
  appointmentNote: String!
}

#
# BEGIN INPUT FIELDS
#

# params for creating a user
input UserCreateInput {
  email: GraphQLEmail!
  homeClinicId: String!
}

# params for logging in a user
input UserLoginInput {
  googleAuthCode: String!
}

# params for creating a clinic
input ClinicCreateInput {
  departmentId: Int!
  name: String!
}

# params for adding or removing patient from care team
input CareTeamInput {
  userId: String!
  patientId: String!
}

# params for starting an appointment
input AppointmentStartInput {
  patientId: String!
  appointmentTypeId: Int
}

# params for ending an appointment
input AppointmentEndInput {
  patientId: String!
  appointmentId: String!
  appointmentNote: String
}

# params for adding a note to an appointment
input AppointmentAddNoteInput {
  patientId: String!
  appointmentId: String!
  appointmentNote: String!
}

# params for editing a patient in the db
input PatientEditInput {
  patientId: String!
  firstName: String
  lastName: String
  dob: String
  gender: String
}

# params for editing a patient health record in athena
input PatientHealthRecordEditInput {
  patientId: String!
  firstName: String
  lastName: String
  gender: String
  zip: Int
  dateOfBirth: String
  suffix: String
  preferredName: String
  raceName: String
  race: [String]
  ethnicityCode: String
  status: String
  ssn: String
  homebound: Boolean
  language6392code: String
  maritalStatus: String
  maritalStatusName: String

  email: String
  homePhone: String
  mobilePhone: String
  consentToCall: Boolean
  consentToText: Boolean

  city: String
  address1: String
  countryCode: String
  countryCode3166: String
  state: String

  povertyLevelIncomeDeclined: Boolean
  povertyLevelIncomerangeDeclined: Boolean
  povertyLevelFamilySizeDeclined: Boolean
}

# params for creating a patient in the db and in athena
input PatientSetupInput {
  firstName: String!
  lastName: String!
  dateOfBirth: String!
  gender: String!
  zip: Int!
  homeClinicId: String!
  suffix: String
  preferredName: String
  raceName: String
  race: [String]
  ethnicityCode: String
  status: String
  ssn: String
  homebound: Boolean
  language6392code: String
  maritalStatus: String
  maritalStatusName: String

  email: String
  homePhone: String
  mobilePhone: String
  consentToCall: Boolean
  consentToText: Boolean

  city: String
  address1: String
  countryCode: String
  countryCode3166: String
  state: String

  povertyLevelIncomeDeclined: Boolean
  povertyLevelIncomerangeDeclined: Boolean
  povertyLevelFamilySizeDeclined: Boolean
}

type RootMutationType {
  # Create a new user
  userCreate(input: UserCreateInput): UserWithAuthToken

  # Login user
  userLogin(input: UserLoginInput): UserWithAuthToken

  # Create a new clinic
  clinicCreate(input: ClinicCreateInput): Clinic

  # Add user to care careTeam
  careTeamAddUser(input: CareTeamInput): [User]

  # Remove user from careTeam
  careTeamRemoveUser(input: CareTeamInput): [User]

  # Add a note to an appointment
  appointmentAddNote(input: AppointmentAddNoteInput): AppointmentAddNoteResult

  # Start an appointment
  appointmentStart(input: AppointmentStartInput): Appointment

  # End an appointment
  appointmentEnd(input: AppointmentEndInput): AppointmentEndResult

  # Edit fields on patient stored in the db
  patientEdit(input: PatientEditInput): Patient

  # Edit a patient's health record
  patientHealthRecordEdit(input: PatientHealthRecordEditInput): PatientHealthRecord

  # Setup patient creates the patient in the db AND in athena
  patientSetup(input: PatientSetupInput): Patient
}

type RootQueryType {
  # A single User
  user(
    # The id of the User
    userId: String!
  ): User

  # All Users (admin only)
  users(
    pageNumber: Int,
    pageSize: Int
  ): UserEdges

  # List of patients the user is on the care team for (their 'patient panel')
  userPatientPanel(
    pageNumber: Int,
    pageSize: Int,
    userId: String
  ): PatientEdges

  # The current User
  currentUser: User

  # A single Patient
  patient(
    patientId: String!
  ): Patient

  # Patient's Athena health record
  patientHealthRecord(
    patientId: String!
  ): PatientHealthRecord

  # Users on a care team
  patientCareTeam(
    patientId: String!
  ): [User]

  # A single clinic
  clinic(
    clinicId: String!
  ): Clinic

  # Patient encounters
  patientEncounters(
    patientId: String!,
    pageNumber: Int,
    pageSize: Int
  ): PatientEncounterEdges

  # Patient medications
  patientMedications(
    patientId: String!
  ): PatientMedications
}

schema {
  query: RootQueryType
  mutation: RootMutationType
}
