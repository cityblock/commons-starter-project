version: 2
jobs:
  lint:
    working_directory: ~/repo
    docker:
      - image: node:8.11.1@sha256:b802a02ee6496c34e2dc0eb0379eb1c738331414956d650c0dffdfa0866acb2f
    steps:
      - checkout
      - restore_cache:
          keys:
            - v3-dependencies-{{ arch }}-{{ checksum "package.json" }}
            # fallback to using the latest cache if no exact match is found
            - v3-dependencies-
      - run: yarn install
      - save_cache:
          key: v3-dependencies-{{ arch }}-{{ checksum "package.json" }}
          paths:
            - ./node_modules
      - run: yarn lint
      - run: yarn stylelint
      - run: yarn typecheck
      - run:
          name: check-schema
          command: './scripts/check-schema-in-sync.sh'
      - run: yarn codegen
      - run: yarn danger ci

  test_frontend:
    working_directory: ~/repo
    docker:
      - image: node:8.11.1@sha256:b802a02ee6496c34e2dc0eb0379eb1c738331414956d650c0dffdfa0866acb2f
    steps:
      - checkout
      - restore_cache:
          keys:
            - v3-dependencies-{{ arch }}-{{ checksum "package.json" }}
            # fallback to using the latest cache if no exact match is found
            - v3-dependencies-
      - run: yarn install
      - save_cache:
          key: v3-dependencies-{{ arch }}-{{ checksum "package.json" }}
          paths:
            - ./node_modules
      - run: yarn test:frontend

  test_api:
    working_directory: ~/repo
    docker:
      - image: node:8.11.1@sha256:b802a02ee6496c34e2dc0eb0379eb1c738331414956d650c0dffdfa0866acb2f
      - image: postgres:10.3@sha256:1ec65278ff8f8bb4a3e1d3ba09f6d09d5666e69765463179ae376e91e65b17a9
        environment:
          POSTGRES_DB: commons_test
          POSTGRES_USER: root
          POSTGRES_PASSWORD: ""
      - image: redis:4.0.9@sha256:2a10443dced488731f0a3ed12e442c230d39b526f95ecb8e280cd1596705e822
    steps:
      - checkout
      - run: apt-get update && apt-get install -y sudo
      - run:
          name: install dockerize
          command: wget https://github.com/jwilder/dockerize/releases/download/$DOCKERIZE_VERSION/dockerize-linux-amd64-$DOCKERIZE_VERSION.tar.gz && sudo tar -C /usr/local/bin -xzvf dockerize-linux-amd64-$DOCKERIZE_VERSION.tar.gz && rm dockerize-linux-amd64-$DOCKERIZE_VERSION.tar.gz
          environment:
            DOCKERIZE_VERSION: v0.3.0
      - restore_cache:
          keys:
            - v3-dependencies-{{ arch }}-{{ checksum "package.json" }}
            # fallback to using the latest cache if no exact match is found
            - v3-dependencies-
      - run: yarn install
      - save_cache:
          key: v3-dependencies-{{ arch }}-{{ checksum "package.json" }}
          paths:
            - ./node_modules
      - run:
          name: Wait for DB
          command: dockerize -wait tcp://localhost:5432 -timeout 1m
      - run:
          name: Wait for Redis
          command: dockerize -wait tcp://localhost:6379 -timeout 1m
      - run: yarn test:api

  test_models:
    working_directory: ~/repo
    docker:
      - image: node:8.11.1@sha256:b802a02ee6496c34e2dc0eb0379eb1c738331414956d650c0dffdfa0866acb2f
      - image: postgres:10.3@sha256:1ec65278ff8f8bb4a3e1d3ba09f6d09d5666e69765463179ae376e91e65b17a9
        environment:
          POSTGRES_DB: commons_test
          POSTGRES_USER: root
          POSTGRES_PASSWORD: ""
    steps:
      - checkout
      - run: apt-get update && apt-get install -y sudo
      - run:
          name: install dockerize
          command: wget https://github.com/jwilder/dockerize/releases/download/$DOCKERIZE_VERSION/dockerize-linux-amd64-$DOCKERIZE_VERSION.tar.gz && sudo tar -C /usr/local/bin -xzvf dockerize-linux-amd64-$DOCKERIZE_VERSION.tar.gz && rm dockerize-linux-amd64-$DOCKERIZE_VERSION.tar.gz
          environment:
            DOCKERIZE_VERSION: v0.3.0
      - restore_cache:
          keys:
            - v3-dependencies-{{ arch }}-{{ checksum "package.json" }}
            # fallback to using the latest cache if no exact match is found
            - v3-dependencies-
      - run: yarn install
      - save_cache:
          key: v3-dependencies-{{ arch }}-{{ checksum "package.json" }}
          paths:
            - ./node_modules
      - run:
          name: Wait for DB
          command: dockerize -wait tcp://localhost:5432 -timeout 1m
      - run: yarn test:models

  deploy_staging:
    working_directory: ~/repo
    docker:
      - image: node:8.11.1@sha256:b802a02ee6496c34e2dc0eb0379eb1c738331414956d650c0dffdfa0866acb2f
    steps:
      - checkout
      - run:
          name: known-hosts
          command: ssh-keyscan -H beta.aptible.com >> ~/.ssh/known_hosts
      - add_ssh_keys:
          fingerprints:
            - "41:eb:14:fe:32:9c:da:a5:fa:3c:3b:c4:69:18:a8:fd"
      - run:
          name: deploy
          command: git push git@beta.aptible.com:cityblock-health/commons-staging.git $CIRCLE_SHA1:master

  deploy_production:
    working_directory: ~/repo
    docker:
      - image: node:8.11.1@sha256:b802a02ee6496c34e2dc0eb0379eb1c738331414956d650c0dffdfa0866acb2f
    steps:
      - checkout
      - run:
          name: known-hosts
          command: ssh-keyscan -H beta.aptible.com >> ~/.ssh/known_hosts
      - add_ssh_keys:
          fingerprints:
            - "41:eb:14:fe:32:9c:da:a5:fa:3c:3b:c4:69:18:a8:fd"
      - run:
          name: deploy
          command: git push git@beta.aptible.com:cityblock-health-phi-ready/commons-production.git $CIRCLE_SHA1:master

workflows:
  version: 2

  test_and_deploy:
    jobs:
      - lint:
          context: commons
          filters:
            tags:
              only: /.*/
            branches:
              ignore: master
      - test_frontend:
          filters:
            tags:
              only: /.*/
      - test_api:
          filters:
            tags:
              only: /.*/
      - test_models:
          filters:
            tags:
              only: /.*/
      - deploy_staging:
          requires:
            - lint
            - test_frontend
            - test_api
            - test_models
          filters:
            branches:
              only: master
      - deploy_production:
          requires:
            - lint
            - test_frontend
            - test_api
            - test_models
          filters:
            tags:
              only: /.*/
            branches:
              ignore: /.*/
